<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Extensions.Configuration.Json</name>
    </assembly>
    <members>
        <member name="T:System.Buffers.ArrayBufferWriter`1">
            <summary>
            Represents a heap-based, array-backed output sink into which <typeparam name="T"/> data can be written.
            </summary>
        </member>
        <member name="M:System.Buffers.ArrayBufferWriter`1.#ctor">
            <summary>
            Creates an instance of an <see cref="T:System.Buffers.ArrayBufferWriter`1"/>, in which data can be written to,
            with the default initial capacity.
            </summary>
        </member>
        <member name="M:System.Buffers.ArrayBufferWriter`1.#ctor(System.Int32)">
            <summary>
            Creates an instance of an <see cref="T:System.Buffers.ArrayBufferWriter`1"/>, in which data can be written to,
            with an initial capacity specified.
            </summary>
            <param name="initialCapacity">The minimum capacity with which to initialize the underlying buffer.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="initialCapacity"/> is not positive (i.e. less than or equal to 0).
            </exception>
        </member>
        <member name="P:System.Buffers.ArrayBufferWriter`1.WrittenMemory">
            <summary>
            Returns the data written to the underlying buffer so far, as a <see cref="T:System.ReadOnlyMemory`1"/>.
            </summary>
        </member>
        <member name="P:System.Buffers.ArrayBufferWriter`1.WrittenSpan">
            <summary>
            Returns the data written to the underlying buffer so far, as a <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
        </member>
        <member name="P:System.Buffers.ArrayBufferWriter`1.WrittenCount">
            <summary>
            Returns the amount of data written to the underlying buffer so far.
            </summary>
        </member>
        <member name="P:System.Buffers.ArrayBufferWriter`1.Capacity">
            <summary>
            Returns the total amount of space within the underlying buffer.
            </summary>
        </member>
        <member name="P:System.Buffers.ArrayBufferWriter`1.FreeCapacity">
            <summary>
            Returns the amount of space available that can still be written into without forcing the underlying buffer to grow.
            </summary>
        </member>
        <member name="M:System.Buffers.ArrayBufferWriter`1.Clear">
            <summary>
            Clears the data written to the underlying buffer.
            </summary>
            <remarks>
            You must clear the <see cref="T:System.Buffers.ArrayBufferWriter`1"/> before trying to re-use it.
            </remarks>
        </member>
        <member name="M:System.Buffers.ArrayBufferWriter`1.Advance(System.Int32)">
            <summary>
            Notifies <see cref="T:System.Buffers.IBufferWriter`1"/> that <paramref name="count"/> amount of data was written to the output <see cref="T:System.Span`1"/>/<see cref="T:System.Memory`1"/>
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="count"/> is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when attempting to advance past the end of the underlying buffer.
            </exception>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="M:System.Buffers.ArrayBufferWriter`1.GetMemory(System.Int32)">
            <summary>
            Returns a <see cref="T:System.Memory`1"/> to write to that is at least the requested length (specified by <paramref name="sizeHint"/>).
            If no <paramref name="sizeHint"/> is provided (or it's equal to <code>0</code>), some non-empty buffer is returned.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="sizeHint"/> is negative.
            </exception>
            <remarks>
            This will never return an empty <see cref="T:System.Memory`1"/>.
            </remarks>
            <remarks>
            There is no guarantee that successive calls will return the same buffer or the same-sized buffer.
            </remarks>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="M:System.Buffers.ArrayBufferWriter`1.GetSpan(System.Int32)">
            <summary>
            Returns a <see cref="T:System.Span`1"/> to write to that is at least the requested length (specified by <paramref name="sizeHint"/>).
            If no <paramref name="sizeHint"/> is provided (or it's equal to <code>0</code>), some non-empty buffer is returned.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="sizeHint"/> is negative.
            </exception>
            <remarks>
            This will never return an empty <see cref="T:System.Span`1"/>.
            </remarks>
            <remarks>
            There is no guarantee that successive calls will return the same buffer or the same-sized buffer.
            </remarks>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="T:System.Buffers.Text.SequenceValidity">
            <summary>
            Represents the validity of a UTF code unit sequence.
            </summary>
        </member>
        <member name="F:System.Buffers.Text.SequenceValidity.Empty">
            <summary>
            The sequence is empty.
            </summary>
        </member>
        <member name="F:System.Buffers.Text.SequenceValidity.WellFormed">
            <summary>
            The sequence is well-formed and unambiguously represents a proper Unicode scalar value.
            </summary>
            <remarks>
            [ 20 ] (U+0020 SPACE) is a well-formed UTF-8 sequence.
            [ C3 A9 ] (U+00E9 LATIN SMALL LETTER E WITH ACUTE) is a well-formed UTF-8 sequence.
            [ F0 9F 98 80 ] (U+1F600 GRINNING FACE) is a well-formed UTF-8 sequence.
            [ D83D DE00 ] (U+1F600 GRINNING FACE) is a well-formed UTF-16 sequence.
            </remarks>
        </member>
        <member name="F:System.Buffers.Text.SequenceValidity.Incomplete">
            <summary>
            The sequence is not well-formed on its own, but it could appear as a prefix
            of a longer well-formed sequence. More code units are needed to make a proper
            determination as to whether this sequence is well-formed. Incomplete sequences
            can only appear at the end of a string.
            </summary>
            <remarks>
            [ C2 ] is an incomplete UTF-8 sequence if it is followed by nothing.
            [ F0 9F ] is an incomplete UTF-8 sequence if it is followed by nothing.
            [ D83D ] is an incomplete UTF-16 sequence if it is followed by nothing.
            </remarks>
        </member>
        <member name="F:System.Buffers.Text.SequenceValidity.Invalid">
            <summary>
            The sequence is never well-formed anywhere, or this sequence can never appear as a prefix
            of a longer well-formed sequence, or the sequence was improperly terminated by the code
            unit which appeared immediately after this sequence.
            </summary>
            <remarks>
            [ 80 ] is an invalid UTF-8 sequence (code unit cannot appear at start of sequence).
            [ FE ] is an invalid UTF-8 sequence (sequence is never well-formed anywhere in UTF-8 string).
            [ C2 ] is an invalid UTF-8 sequence if it is followed by [ 20 ] (sequence improperly terminated).
            [ ED A0 ] is an invalid UTF-8 sequence (sequence is never well-formed anywhere in UTF-8 string).
            [ DE00 ] is an invalid UTF-16 sequence (code unit cannot appear at start of sequence).
            </remarks>
        </member>
        <member name="T:System.Text.Json.Serialization.ClassType">
            <summary>
            Determines how a given class is treated when it is (de)serialized.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonAttribute">
            <summary>
            The base class of serialization attributes.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonIgnoreAttribute">
            <summary>
            Prevents a property from being serialized or deserialized.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonNamingPolicy">
            <summary>
            Determines the naming policy used to convert a JSON name to another format, such as a camel-casing format.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonNamingPolicy.CamelCase">
            <summary>
            Returns the naming policy for camel-casing.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonNamingPolicy.ConvertName(System.String)">
            <summary>
            Converts the provided name.
            </summary>
            <param name="name">The name to convert.</param>
            <returns>The converted name.</returns>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonPropertyInfoCommon`3">
            <summary>
            Represents a strongly-typed property to prevent boxing and to create a direct delegate to the getter\setter.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonPropertyInfoNotNullable`3">
            <summary>
            Represents a strongly-typed property that is not a <see cref="T:System.Nullable`1"/>.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonPropertyInfoNullable`2">
            <summary>
            Represents a strongly-typed property that is a <see cref="T:System.Nullable`1"/>.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonPropertyNameAttribute">
            <summary>
            Specifies the property name that is present in the JSON when serializing and deserializing.
            This overrides any naming policy specified by <see cref="T:System.Text.Json.Serialization.JsonNamingPolicy"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:System.Text.Json.Serialization.JsonPropertyNameAttribute"/> with the specified property name.
            </summary>
            <param name="propertyName">The name of the property.</param>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonPropertyNameAttribute.Name">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonSerializer">
            <summary>
            Provides functionality to serialize objects or value types to JSON and
            deserialize JSON into objects or value types.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonSerializer.Parse``1(System.ReadOnlySpan{System.Byte},System.Text.Json.Serialization.JsonSerializerOptions)">
            <summary>
            Parse the UTF-8 encoded text representing a single JSON value into a <typeparamref name="TValue"/>.
            </summary>
            <returns>A <typeparamref name="TValue"/> representation of the JSON value.</returns>
            <param name="utf8Json">JSON text to parse.</param>
            <param name="options">Options to control the behavior during parsing.</param>
            <exception cref="T:System.Text.Json.JsonReaderException">
            Thrown when the JSON is invalid,
            <typeparamref name="TValue"/> is not compatible with the JSON,
            or when there is remaining data in the Stream.
            </exception>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonSerializer.Parse(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.Serialization.JsonSerializerOptions)">
            <summary>
            Parse the UTF-8 encoded text representing a single JSON value into a <paramref name="returnType"/>.
            </summary>
            <returns>A <paramref name="returnType"/> representation of the JSON value.</returns>
            <param name="utf8Json">JSON text to parse.</param>
            <param name="returnType">The type of the object to convert to and return.</param>
            <param name="options">Options to control the behavior during parsing.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="returnType"/> is null.
            </exception>
            <exception cref="T:System.Text.Json.JsonReaderException">
            Thrown when the JSON is invalid,
            <paramref name="returnType"/> is not compatible with the JSON,
            or when there is remaining data in the Stream.
            </exception>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonSerializer.ReadAsync``1(System.IO.Stream,System.Text.Json.Serialization.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            Read the UTF-8 encoded text representing a single JSON value into a <typeparamref name="TValue"/>.
            The Stream will be read to completion.
            </summary>
            <returns>A <typeparamref name="TValue"/> representation of the JSON value.</returns>
            <param name="utf8Json">JSON data to parse.</param>
            <param name="options">Options to control the behavior during reading.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> which may be used to cancel the read operation.
            </param>
            <exception cref="T:System.Text.Json.JsonReaderException">
            Thrown when the JSON is invalid,
            <typeparamref name="TValue"/> is not compatible with the JSON,
            or when there is remaining data in the Stream.
            </exception>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonSerializer.ReadAsync(System.IO.Stream,System.Type,System.Text.Json.Serialization.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            Read the UTF-8 encoded text representing a single JSON value into a <paramref name="returnType"/>.
            The Stream will be read to completion.
            </summary>
            <returns>A <paramref name="returnType"/> representation of the JSON value.</returns>
            <param name="utf8Json">JSON data to parse.</param>
            <param name="returnType">The type of the object to convert to and return.</param>
            <param name="options">Options to control the behavior during reading.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> which may be used to cancel the read operation.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="utf8Json"/> or <paramref name="returnType"/> is null.
            </exception>
            <exception cref="T:System.Text.Json.JsonReaderException">
            Thrown when the JSON is invalid,
            the <paramref name="returnType"/> is not compatible with the JSON,
            or when there is remaining data in the Stream.
            </exception>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonSerializer.Parse``1(System.String,System.Text.Json.Serialization.JsonSerializerOptions)">
            <summary>
            Parse the text representing a single JSON value into a <typeparamref name="TValue"/>.
            </summary>
            <returns>A <typeparamref name="TValue"/> representation of the JSON value.</returns>
            <param name="json">JSON text to parse.</param>
            <param name="options">Options to control the behavior during parsing.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="json"/> is null.
            </exception>
            <exception cref="T:System.Text.Json.JsonReaderException">
            Thrown when the JSON is invalid,
            <typeparamref name="TValue"/> is not compatible with the JSON,
            or when there is remaining data in the Stream.
            </exception>
            <remarks>Using a UTF-16 <see cref="T:System.String"/> is not as efficient as using the
            UTF-8 methods since the implementation natively uses UTF-8.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonSerializer.Parse(System.String,System.Type,System.Text.Json.Serialization.JsonSerializerOptions)">
            <summary>
            Parse the text representing a single JSON value into a <paramref name="returnType"/>.
            </summary>
            <returns>A <paramref name="returnType"/> representation of the JSON value.</returns>
            <param name="json">JSON text to parse.</param>
            <param name="returnType">The type of the object to convert to and return.</param>
            <param name="options">Options to control the behavior during parsing.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="json"/> or <paramref name="returnType"/> is null.
            </exception>
            <exception cref="T:System.Text.Json.JsonReaderException">
            Thrown when the JSON is invalid,
            the <paramref name="returnType"/> is not compatible with the JSON,
            or when there is remaining data in the Stream.
            </exception>
            <remarks>Using a UTF-16 <see cref="T:System.String"/> is not as efficient as using the
            UTF-8 methods since the implementation natively uses UTF-8.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonSerializer.ToBytes``1(``0,System.Text.Json.Serialization.JsonSerializerOptions)">
            <summary>
            Convert the provided value into a <see cref="T:System.Byte"/> array.
            </summary>
            <returns>A UTF-8 representation of the value.</returns>
            <param name="value">The value to convert.</param>
            <param name="options">Options to control the convertion behavior.</param>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonSerializer.ToBytes(System.Object,System.Type,System.Text.Json.Serialization.JsonSerializerOptions)">
            <summary>
            Convert the provided value into a <see cref="T:System.Byte"/> array.
            </summary>
            <returns>A UTF-8 representation of the value.</returns>
            <param name="value">The value to convert.</param>
            <param name="type">The type of the <paramref name="value"/> to convert.</param>
            <param name="options">Options to control the convertion behavior.</param>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonSerializer.WriteAsync``1(``0,System.IO.Stream,System.Text.Json.Serialization.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            Convert the provided value to UTF-8 encoded JSON text and write it to the <see cref="T:System.IO.Stream"/>.
            </summary>
            <returns>A task that represents the asynchronous write operation.</returns>
            <param name="value">The value to convert.</param>
            <param name="utf8Json">The UTF-8 <see cref="T:System.IO.Stream"/> to write to.</param>
            <param name="options">Options to control the convertion behavior.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> which may be used to cancel the write operation.</param>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonSerializer.WriteAsync(System.Object,System.Type,System.IO.Stream,System.Text.Json.Serialization.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            Convert the provided value to UTF-8 encoded JSON text and write it to the <see cref="T:System.IO.Stream"/>.
            </summary>
            <returns>A task that represents the asynchronous write operation.</returns>
            <param name="value">The value to convert.</param>
            <param name="type">The type of the <paramref name="value"/> to convert.</param>
            <param name="utf8Json">The UTF-8 <see cref="T:System.IO.Stream"/> to write to.</param>
            <param name="options">Options to control the convertion behavior.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> which may be used to cancel the write operation.</param>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonSerializer.ToString``1(``0,System.Text.Json.Serialization.JsonSerializerOptions)">
            <summary>
            Convert the provided value into a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> representation of the value.</returns>
            <param name="value">The value to convert.</param>
            <param name="options">Options to control the convertion behavior.</param>
            <remarks>Using a <see cref="T:System.String"/> is not as efficient as using UTF-8
            encoding since the implementation internally uses UTF-8. See also <see cref="M:System.Text.Json.Serialization.JsonSerializer.ToBytes(System.Object,System.Type,System.Text.Json.Serialization.JsonSerializerOptions)"/>
            and <see cref="M:System.Text.Json.Serialization.JsonSerializer.WriteAsync(System.Object,System.Type,System.IO.Stream,System.Text.Json.Serialization.JsonSerializerOptions,System.Threading.CancellationToken)"/>.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonSerializer.ToString(System.Object,System.Type,System.Text.Json.Serialization.JsonSerializerOptions)">
            <summary>
            Convert the provided value into a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> representation of the value.</returns>
            <param name="value">The value to convert.</param>
            <param name="type">The type of the <paramref name="value"/> to convert.</param>
            <param name="options">Options to control the convertion behavior.</param>
            <remarks>Using a <see cref="T:System.String"/> is not as efficient as using UTF-8
            encoding since the implementation internally uses UTF-8. See also <see cref="M:System.Text.Json.Serialization.JsonSerializer.ToBytes(System.Object,System.Type,System.Text.Json.Serialization.JsonSerializerOptions)"/>
            and <see cref="M:System.Text.Json.Serialization.JsonSerializer.WriteAsync(System.Object,System.Type,System.IO.Stream,System.Text.Json.Serialization.JsonSerializerOptions,System.Threading.CancellationToken)"/>.
            </remarks>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonSerializerOptions">
            <summary>
            Provides options to be used with <see cref="T:System.Text.Json.Serialization.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonSerializerOptions.#ctor">
            <summary>
            Constructs a new <see cref="T:System.Text.Json.Serialization.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonSerializerOptions.AllowTrailingCommas">
            <summary>
            Defines whether an extra comma at the end of a list of JSON values in an object or array
            is allowed (and ignored) within the JSON payload being deserialized.
            By default, it's set to false, and <exception cref="T:System.Text.Json.JsonReaderException"/> is thrown if a trailing comma is encountered.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this property is set after serialization or deserialization has occurred.
            </exception>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonSerializerOptions.DefaultBufferSize">
            <summary>
            The default buffer size in bytes used when creating temporary buffers.
            </summary>
            <remarks>The default size is 16K.</remarks>
            <exception cref="T:System.ArgumentException">Thrown when the buffer size is less than 1.</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this property is set after serialization or deserialization has occurred.
            </exception>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonSerializerOptions.DictionaryKeyPolicy">
            <summary>
            Specifies the policy used to convert a <see cref="T:System.Collections.IDictionary"/> key's name to another format, such as camel-casing.
            </summary>
            <remarks>
            This property can be set to <see cref="P:System.Text.Json.Serialization.JsonNamingPolicy.CamelCase"/> to specify a camel-casing policy.
            </remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonSerializerOptions.IgnoreNullValues">
            <summary>
            Determines whether null values are ignored during serialization and deserialization.
            The default value is false.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this property is set after serialization or deserialization has occurred.
            </exception>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonSerializerOptions.IgnoreReadOnlyProperties">
            <summary>
            Determines whether read-only properties are ignored during serialization and deserialization.
            A property is read-only if it contains a public getter but not a public setter.
            The default value is false.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this property is set after serialization or deserialization has occurred.
            </exception>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonSerializerOptions.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when serializing or deserializing JSON, with the default (i.e. 0) indicating a max depth of 64.
            Going past this depth will throw a <exception cref="T:System.Text.Json.JsonReaderException"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this property is set after serialization or deserialization has occurred.
            </exception>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonSerializerOptions.PropertyNamingPolicy">
            <summary>
            Specifies the policy used to convert a property's name on an object to another format, such as camel-casing.
            The resulting property name is expected to match the JSON payload during deserialization, and
            will be used when writing the property name during serialization.
            </summary>
            <remarks>
            The policy is not used for properties that have a <see cref="T:System.Text.Json.Serialization.JsonPropertyNameAttribute"/> applied.
            This property can be set to <see cref="P:System.Text.Json.Serialization.JsonNamingPolicy.CamelCase"/> to specify a camel-casing policy.
            </remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonSerializerOptions.PropertyNameCaseInsensitive">
            <summary>
            Determines whether a property's name uses a case-insensitive comparison during deserialization.
            The default value is false.
            </summary>
            <remarks>There is a performance cost associated when the value is true.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonSerializerOptions.ReadCommentHandling">
            <summary>
            Defines how the comments are handled during deserialization.
            By default <exception cref="T:System.Text.Json.JsonReaderException"/> is thrown if a comment is encountered.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this property is set after serialization or deserialization has occurred.
            </exception>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonSerializerOptions.WriteIndented">
            <summary>
            Defines whether JSON should pretty print which includes:
            indenting nested JSON tokens, adding new lines, and adding white space between property names and values.
            By default, the JSON is serialized without any extra white space.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this property is set after serialization or deserialization has occurred.
            </exception>
        </member>
        <member name="T:System.Text.Json.Serialization.PooledBufferWriter`1">
            <summary>
              This is an implementation detail and MUST NOT be called by source-package consumers.
            </summary>
        </member>
        <member name="T:System.Text.Json.ConsumeNumberResult">
            <summary>
            This enum captures the tri-state return value when trying to read a
            JSON number.
            </summary>
        </member>
        <member name="F:System.Text.Json.ConsumeNumberResult.Success">
            <summary>
            Reached a valid end of number and hence no action is required.
            </summary>
        </member>
        <member name="F:System.Text.Json.ConsumeNumberResult.OperationIncomplete">
            <summary>
            Successfully processed a portion of the number and need to
            read to the next region of the number.
            </summary>
        </member>
        <member name="F:System.Text.Json.ConsumeNumberResult.NeedMoreData">
            <summary>
            Observed incomplete data.
            Return false if we have more data to follow. Otherwise throw.
            </summary>
        </member>
        <member name="T:System.Text.Json.ConsumeTokenResult">
            <summary>
            This enum captures the tri-state return value when trying to read the
            next JSON token.
            </summary>
        </member>
        <member name="F:System.Text.Json.ConsumeTokenResult.Success">
            <summary>
            Reached a valid end of token and hence no action is required.
            </summary>
        </member>
        <member name="F:System.Text.Json.ConsumeTokenResult.NotEnoughDataRollBackState">
            <summary>
            Observed incomplete data but progressed state partially in looking ahead.
            Return false and roll-back to a previously saved state.
            </summary>
        </member>
        <member name="F:System.Text.Json.ConsumeTokenResult.IncompleteNoRollBackNecessary">
            <summary>
            Observed incomplete data but no change was made to the state.
            Return false, but do not roll-back anything since nothing changed.
            </summary>
        </member>
        <member name="T:System.Text.Json.JsonCommentHandling">
            <summary>
            This enum defines the various ways the <see cref="T:System.Text.Json.Utf8JsonReader"/> can deal with comments.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonCommentHandling.Disallow">
            <summary>
            By default, do no allow comments within the JSON input.
            Comments are treated as invalid JSON if found and a
            <see cref="T:System.Text.Json.JsonReaderException"/> is thrown.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonCommentHandling.Allow">
            <summary>
            Allow comments within the JSON input and treat them as a valid token.
            While reading, the caller will be able to access the comment values.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonCommentHandling.Skip">
            <summary>
            Allow comments within the JSON input and ignore them.
            The <see cref="T:System.Text.Json.Utf8JsonReader"/> will behave as if no comments were present.
            </summary>
        </member>
        <member name="T:System.Text.Json.JsonDocument">
            <summary>
              Provides a mechanism for examining the structural content of a JSON value without
              automatically instantiating data values.
            </summary>
            <remarks>
              This class utilizes resources from pooled memory to minimize the garbage collector (GC)
              impact in high-usage scenarios. Failure to properly Dispose this object will result in
              the memory not being returned to the pool, which will cause an increase in GC impact across
              various parts of the framework.
            </remarks>
        </member>
        <member name="T:System.Text.Json.JsonDocument.DbRow">
            <summary>
              This is an implementation detail and MUST NOT be used by source-package consumers.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonDocument.DbRow.Location">
            <summary>
            Index into the payload
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonDocument.DbRow.SizeOrLength">
            <summary>
            length of text in JSON payload (or number of elements if its a JSON array)
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonDocument.DbRow.HasComplexChildren">
            <summary>
            Number: Use scientific format.
            String/PropertyName: Unescaping is required.
            Array: At least one element is an object/array.
            Otherwise; false
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonReaderOptions)">
             <summary>
               Parse memory as UTF-8-encoded text representing a single JSON value into a JsonDocument.
             </summary>
             <remarks>
               <para>
                 The <see cref="T:System.ReadOnlyMemory`1"/> value will be used for the entire lifetime of the
                 JsonDocument object, and the caller must ensure that the data therein does not change during
                 the object lifetime.
               </para>
            
               <para>
                 Because the input is considered to be text, a UTF-8 Byte-Order-Mark (BOM) must not be present.
               </para>
             </remarks>
             <param name="utf8Json">JSON text to parse.</param>
             <param name="readerOptions">Options to control the reader behavior during parsing.</param>
             <returns>
               A JsonDocument representation of the JSON value.
             </returns>
             <exception cref="T:System.Text.Json.JsonReaderException">
               <paramref name="utf8Json"/> does not represent a valid single JSON value.
             </exception>
             <exception cref="T:System.ArgumentException">
               <paramref name="readerOptions"/> contains unsupported options.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonDocument.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonReaderOptions)">
             <summary>
               Parse a sequence as UTF-8-encoded text representing a single JSON value into a JsonDocument.
             </summary>
             <remarks>
               <para>
                 The <see cref="T:System.Buffers.ReadOnlySequence`1"/> may be used for the entire lifetime of the
                 JsonDocument object, and the caller must ensure that the data therein does not change during
                 the object lifetime.
               </para>
            
               <para>
                 Because the input is considered to be text, a UTF-8 Byte-Order-Mark (BOM) must not be present.
               </para>
             </remarks>
             <param name="utf8Json">JSON text to parse.</param>
             <param name="readerOptions">Options to control the reader behavior during parsing.</param>
             <returns>
               A JsonDocument representation of the JSON value.
             </returns>
             <exception cref="T:System.Text.Json.JsonReaderException">
               <paramref name="utf8Json"/> does not represent a valid single JSON value.
             </exception>
             <exception cref="T:System.ArgumentException">
               <paramref name="readerOptions"/> contains unsupported options.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonDocument.Parse(System.IO.Stream,System.Text.Json.JsonReaderOptions)">
            <summary>
              Parse a <see cref="T:System.IO.Stream"/> as UTF-8-encoded data representing a single JSON value into a
              JsonDocument.  The Stream will be read to completion.
            </summary>
            <param name="utf8Json">JSON data to parse.</param>
            <param name="readerOptions">Options to control the reader behavior during parsing.</param>
            <returns>
              A JsonDocument representation of the JSON value.
            </returns>
            <exception cref="T:System.Text.Json.JsonReaderException">
              <paramref name="utf8Json"/> does not represent a valid single JSON value.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="readerOptions"/> contains unsupported options.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonDocument.ParseAsync(System.IO.Stream,System.Text.Json.JsonReaderOptions,System.Threading.CancellationToken)">
            <summary>
              Parse a <see cref="T:System.IO.Stream"/> as UTF-8-encoded data representing a single JSON value into a
              JsonDocument.  The Stream will be read to completion.
            </summary>
            <param name="utf8Json">JSON data to parse.</param>
            <param name="readerOptions">Options to control the reader behavior during parsing.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>
              A Task to produce a JsonDocument representation of the JSON value.
            </returns>
            <exception cref="T:System.Text.Json.JsonReaderException">
              <paramref name="utf8Json"/> does not represent a valid single JSON value.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="readerOptions"/> contains unsupported options.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonReaderOptions)">
            <summary>
              Parse text representing a single JSON value into a JsonDocument.
            </summary>
            <remarks>
              The <see cref="T:System.ReadOnlyMemory`1"/> value may be used for the entire lifetime of the
              JsonDocument object, and the caller must ensure that the data therein does not change during
              the object lifetime.
            </remarks>
            <param name="json">JSON text to parse.</param>
            <param name="readerOptions">Options to control the reader behavior during parsing.</param>
            <returns>
              A JsonDocument representation of the JSON value.
            </returns>
            <exception cref="T:System.Text.Json.JsonReaderException">
              <paramref name="json"/> does not represent a valid single JSON value.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="readerOptions"/> contains unsupported options.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonDocument.Parse(System.String,System.Text.Json.JsonReaderOptions)">
            <summary>
              Parse text representing a single JSON value into a JsonDocument.
            </summary>
            <param name="json">JSON text to parse.</param>
            <param name="readerOptions">Options to control the reader behavior during parsing.</param>
            <returns>
              A JsonDocument representation of the JSON value.
            </returns>
            <exception cref="T:System.Text.Json.JsonReaderException">
              <paramref name="json"/> does not represent a valid single JSON value.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="readerOptions"/> contains unsupported options.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonDocument.TryParseValue(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonDocument@)">
             <summary>
               Attempts to parse one JSON value (including objects or arrays) from the provided reader.
             </summary>
             <param name="reader">The reader to read.</param>
             <param name="document">Receives the parsed document.</param>
             <returns>
               <see langword="true"/> if a value was read and parsed into a JsonDocument,
               <see langword="false"/> if the reader ran out of data while parsing.
               All other situations result in an exception being thrown.
             </returns>
             <remarks>
               <para>
                 If the <see cref="P:System.Text.Json.Utf8JsonReader.TokenType"/> property of <paramref name="reader"/>
                 is <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/> or <see cref="F:System.Text.Json.JsonTokenType.None"/>, the
                 reader will be advanced by one call to <see cref="M:System.Text.Json.Utf8JsonReader.Read"/> to determine
                 the start of the value.
               </para>
            
               <para>
                 Upon completion of this method <paramref name="reader"/> will be positioned at the
                 final token in the JSON value.  If an exception is thrown, or <see langword="false"/>
                 is returned, the reader is reset to the state it was in when the method was called.
               </para>
            
               <para>
                 This method makes a copy of the data the reader acted on, so there is no caller
                 requirement to maintain data integrity beyond the return of this method.
               </para>
             </remarks>
             <exception cref="T:System.ArgumentException">
               <paramref name="reader"/> is using unsupported options.
             </exception>
             <exception cref="T:System.ArgumentException">
               The current <paramref name="reader"/> token does not start or represent a value.
             </exception>
             <exception cref="T:System.Text.Json.JsonReaderException">
               A value could not be read from the reader.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonDocument.ParseValue(System.Text.Json.Utf8JsonReader@)">
             <summary>
               Parses one JSON value (including objects or arrays) from the provided reader.
             </summary>
             <param name="reader">The reader to read.</param>
             <returns>
               A JsonDocument representing the value (and nested values) read from the reader.
             </returns>
             <remarks>
               <para>
                 If the <see cref="P:System.Text.Json.Utf8JsonReader.TokenType"/> property of <paramref name="reader"/>
                 is <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/> or <see cref="F:System.Text.Json.JsonTokenType.None"/>, the
                 reader will be advanced by one call to <see cref="M:System.Text.Json.Utf8JsonReader.Read"/> to determine
                 the start of the value.
               </para>
             
               <para>
                 Upon completion of this method <paramref name="reader"/> will be positioned at the
                 final token in the JSON value.  If an exception is thrown the reader is reset to
                 the state it was in when the method was called.
               </para>
            
               <para>
                 This method makes a copy of the data the reader acted on, so there is no caller
                 requirement to maintain data integrity beyond the return of this method.
               </para>
             </remarks>
             <exception cref="T:System.ArgumentException">
               <paramref name="reader"/> is using unsupported options.
             </exception>
             <exception cref="T:System.ArgumentException">
               The current <paramref name="reader"/> token does not start or represent a value.
             </exception>
             <exception cref="T:System.Text.Json.JsonReaderException">
               A value could not be read from the reader.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonDocument.TryGetNamedPropertyValue(System.Int32,System.ReadOnlySpan{System.Char},System.Text.Json.JsonElement@)">
            <summary>
              This is an implementation detail and MUST NOT be called by source-package consumers.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonDocument.TryGetNamedPropertyValue(System.Int32,System.ReadOnlySpan{System.Byte},System.Text.Json.JsonElement@)">
            <summary>
              This is an implementation detail and MUST NOT be called by source-package consumers.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonDocument.IsDisposable">
            <summary>
              This is an implementation detail and MUST NOT be called by source-package consumers.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonDocument.RootElement">
            <summary>
              The <see cref="T:System.Text.Json.JsonElement"/> representing the value of the document.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonDocument.Dispose">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonDocument.GetJsonTokenType(System.Int32)">
            <summary>
              This is an implementation detail and MUST NOT be called by source-package consumers.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonDocument.GetArrayLength(System.Int32)">
            <summary>
              This is an implementation detail and MUST NOT be called by source-package consumers.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonDocument.GetArrayIndexElement(System.Int32,System.Int32)">
            <summary>
              This is an implementation detail and MUST NOT be called by source-package consumers.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonDocument.GetEndIndex(System.Int32,System.Boolean)">
            <summary>
              This is an implementation detail and MUST NOT be called by source-package consumers.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonDocument.GetString(System.Int32,System.Text.Json.JsonTokenType)">
            <summary>
              This is an implementation detail and MUST NOT be called by source-package consumers.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonDocument.GetNameOfPropertyValue(System.Int32)">
            <summary>
              This is an implementation detail and MUST NOT be called by source-package consumers.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonDocument.TryGetValue(System.Int32,System.Int32@)">
            <summary>
              This is an implementation detail and MUST NOT be called by source-package consumers.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonDocument.TryGetValue(System.Int32,System.UInt32@)">
            <summary>
              This is an implementation detail and MUST NOT be called by source-package consumers.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonDocument.TryGetValue(System.Int32,System.Int64@)">
            <summary>
              This is an implementation detail and MUST NOT be called by source-package consumers.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonDocument.TryGetValue(System.Int32,System.UInt64@)">
            <summary>
              This is an implementation detail and MUST NOT be called by source-package consumers.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonDocument.TryGetValue(System.Int32,System.Double@)">
            <summary>
              This is an implementation detail and MUST NOT be called by source-package consumers.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonDocument.TryGetValue(System.Int32,System.Single@)">
            <summary>
              This is an implementation detail and MUST NOT be called by source-package consumers.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonDocument.TryGetValue(System.Int32,System.Decimal@)">
            <summary>
              This is an implementation detail and MUST NOT be called by source-package consumers.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonDocument.TryGetValue(System.Int32,System.DateTime@)">
            <summary>
              This is an implementation detail and MUST NOT be called by source-package consumers.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonDocument.TryGetValue(System.Int32,System.DateTimeOffset@)">
            <summary>
              This is an implementation detail and MUST NOT be called by source-package consumers.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonDocument.TryGetValue(System.Int32,System.Guid@)">
            <summary>
              This is an implementation detail and MUST NOT be called by source-package consumers.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonDocument.GetRawValueAsString(System.Int32)">
            <summary>
              This is an implementation detail and MUST NOT be called by source-package consumers.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonDocument.GetPropertyRawValueAsString(System.Int32)">
            <summary>
              This is an implementation detail and MUST NOT be called by source-package consumers.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonDocument.CloneElement(System.Int32)">
            <summary>
              This is an implementation detail and MUST NOT be called by source-package consumers.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonDocument.WriteElementTo(System.Int32,System.Text.Json.Utf8JsonWriter,System.ReadOnlySpan{System.Char})">
            <summary>
              This is an implementation detail and MUST NOT be called by source-package consumers.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonDocument.WriteElementTo(System.Int32,System.Text.Json.Utf8JsonWriter,System.ReadOnlySpan{System.Byte})">
            <summary>
              This is an implementation detail and MUST NOT be called by source-package consumers.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonDocument.WriteElementTo(System.Int32,System.Text.Json.Utf8JsonWriter)">
            <summary>
              This is an implementation detail and MUST NOT be called by source-package consumers.
            </summary>
        </member>
        <member name="T:System.Text.Json.JsonElement">
            <summary>
              Represents a specific JSON value within a <see cref="T:System.Text.Json.JsonDocument"/>.
            </summary>
        </member>
        <member name="T:System.Text.Json.JsonElement.ArrayEnumerator">
            <summary>
              An enumerable and enumerator for the contents of a JSON array.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.#ctor(System.Text.Json.JsonElement)">
            <summary>
              This is an implementation detail and MUST NOT be called by source-package consumers.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.Current">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
              An <see cref="T:System.Text.Json.JsonElement.ArrayEnumerator"/> value that can be used to iterate
              through the array.
            </returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonElement}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Dispose">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Reset">
            <inheritdoc />
        </member>
        <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerator#Current">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="T:System.Text.Json.JsonElement.ObjectEnumerator">
            <summary>
              An enumerable and enumerator for the properties of a JSON object.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.#ctor(System.Text.Json.JsonElement)">
            <summary>
              This is an implementation detail and MUST NOT be called by source-package consumers.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.Current">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.GetEnumerator">
            <summary>
              Returns an enumerator that iterates the properties of an object.
            </summary>
            <returns>
              An <see cref="T:System.Text.Json.JsonElement.ObjectEnumerator"/> value that can be used to iterate
              through the object.
            </returns>
            <remarks>
              The enumerator will enumerate the properties in the order they are
              declared, and when an object has multiple definitions of a single
              property they will all individually be returned (each in the order
              they appear in the content).
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonProperty}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Dispose">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Reset">
            <inheritdoc />
        </member>
        <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerator#Current">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonElement.#ctor(System.Text.Json.JsonDocument,System.Int32)">
            <summary>
              This is an implementation detail and MUST NOT be called by source-package consumers.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonElement.Type">
            <summary>
              The <see cref="T:System.Text.Json.JsonValueType"/> that the value is.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="P:System.Text.Json.JsonElement.Item(System.Int32)">
            <summary>
              Get the value at a specified index when the current value is a
              <see cref="F:System.Text.Json.JsonValueType.Array"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is not <see cref="F:System.Text.Json.JsonValueType.Array"/>.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
              <paramref name="index"/> is not in the range [0, <see cref="M:System.Text.Json.JsonElement.GetArrayLength"/>()).
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetArrayLength">
            <summary>
              Get the number of values contained within the current array value.
            </summary>
            <returns>The number of values contained within the current array value.</returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is not <see cref="F:System.Text.Json.JsonValueType.Array"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetProperty(System.String)">
             <summary>
               Gets a <see cref="T:System.Text.Json.JsonElement"/> representing the value of a required property identified
               by <paramref name="propertyName"/>.
             </summary>
             <remarks>
               Property name matching is performed as an ordinal, case-sensitive, comparison.
            
               If a property is defined multiple times for the same object, the last such definition is
               what is matched.
             </remarks>
             <param name="propertyName">Name of the property whose value to return.</param>
             <returns>
               A <see cref="T:System.Text.Json.JsonElement"/> representing the value of the requested property.
             </returns>
             <seealso cref="M:System.Text.Json.JsonElement.EnumerateObject"/>
             <exception cref="T:System.InvalidOperationException">
               This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is not <see cref="F:System.Text.Json.JsonValueType.Object"/>.
             </exception>
             <exception cref="T:System.Collections.Generic.KeyNotFoundException">
               No property was found with the requested name.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="propertyName"/> is <see langword="null"/>.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
               The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Char})">
             <summary>
               Gets a <see cref="T:System.Text.Json.JsonElement"/> representing the value of a required property identified
               by <paramref name="propertyName"/>.
             </summary>
             <remarks>
               <para>
                 Property name matching is performed as an ordinal, case-sensitive, comparison.
               </para>
            
               <para>
                 If a property is defined multiple times for the same object, the last such definition is
                 what is matched.
               </para>
             </remarks>
             <param name="propertyName">Name of the property whose value to return.</param>
             <returns>
               A <see cref="T:System.Text.Json.JsonElement"/> representing the value of the requested property.
             </returns>
             <seealso cref="M:System.Text.Json.JsonElement.EnumerateObject"/>
             <exception cref="T:System.InvalidOperationException">
               This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is not <see cref="F:System.Text.Json.JsonValueType.Object"/>.
             </exception>
             <exception cref="T:System.Collections.Generic.KeyNotFoundException">
               No property was found with the requested name.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
               The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Byte})">
             <summary>
               Gets a <see cref="T:System.Text.Json.JsonElement"/> representing the value of a required property identified
               by <paramref name="utf8PropertyName"/>.
             </summary>
             <remarks>
               <para>
                 Property name matching is performed as an ordinal, case-sensitive, comparison.
               </para>
            
               <para>
                 If a property is defined multiple times for the same object, the last such definition is
                 what is matched.
               </para>
             </remarks>
             <param name="utf8PropertyName">
               The UTF-8 (with no Byte-Order-Mark (BOM)) representation of the name of the property to return.
             </param>
             <returns>
               A <see cref="T:System.Text.Json.JsonElement"/> representing the value of the requested property.
             </returns>
             <exception cref="T:System.InvalidOperationException">
               This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is not <see cref="F:System.Text.Json.JsonValueType.Object"/>.
             </exception>
             <exception cref="T:System.Collections.Generic.KeyNotFoundException">
               No property was found with the requested name.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
               The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
             </exception>
             <seealso cref="M:System.Text.Json.JsonElement.EnumerateObject"/>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.String,System.Text.Json.JsonElement@)">
             <summary>
               Looks for a property named <paramref name="propertyName"/> in the current object, returning
               whether or not such a property existed. When the property exists <paramref name="value"/>
               is assigned to the value of that property.
             </summary>
             <remarks>
               <para>
                 Property name matching is performed as an ordinal, case-sensitive, comparison.
               </para>
            
               <para>
                 If a property is defined multiple times for the same object, the last such definition is
                 what is matched.
               </para>
             </remarks>
             <param name="propertyName">Name of the property to find.</param>
             <param name="value">Receives the value of the located property.</param>
             <returns>
               <see langword="true"/> if the property was found, <see langword="false"/> otherwise.
             </returns>
             <exception cref="T:System.InvalidOperationException">
               This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is not <see cref="F:System.Text.Json.JsonValueType.Object"/>.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="propertyName"/> is <see langword="null"/>.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
               The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
             </exception>
             <seealso cref="M:System.Text.Json.JsonElement.EnumerateObject"/>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Char},System.Text.Json.JsonElement@)">
             <summary>
               Looks for a property named <paramref name="propertyName"/> in the current object, returning
               whether or not such a property existed. When the property exists <paramref name="value"/>
               is assigned to the value of that property.
             </summary>
             <remarks>
               <para>
                 Property name matching is performed as an ordinal, case-sensitive, comparison.
               </para>
            
               <para>
                 If a property is defined multiple times for the same object, the last such definition is
                 what is matched.
               </para>
             </remarks>
             <param name="propertyName">Name of the property to find.</param>
             <param name="value">Receives the value of the located property.</param>
             <returns>
               <see langword="true"/> if the property was found, <see langword="false"/> otherwise.
             </returns>
             <seealso cref="M:System.Text.Json.JsonElement.EnumerateObject"/>
             <exception cref="T:System.InvalidOperationException">
               This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is not <see cref="F:System.Text.Json.JsonValueType.Object"/>.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
               The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonElement@)">
             <summary>
               Looks for a property named <paramref name="utf8PropertyName"/> in the current object, returning
               whether or not such a property existed. When the property exists <paramref name="value"/>
               is assigned to the value of that property.
             </summary>
             <remarks>
               <para>
                 Property name matching is performed as an ordinal, case-sensitive, comparison.
               </para>
            
               <para>
                 If a property is defined multiple times for the same object, the last such definition is
                 what is matched.
               </para>
             </remarks>
             <param name="utf8PropertyName">
               The UTF-8 (with no Byte-Order-Mark (BOM)) representation of the name of the property to return.
             </param>
             <param name="value">Receives the value of the located property.</param>
             <returns>
               <see langword="true"/> if the property was found, <see langword="false"/> otherwise.
             </returns>
             <seealso cref="M:System.Text.Json.JsonElement.EnumerateObject"/>
             <exception cref="T:System.InvalidOperationException">
               This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is not <see cref="F:System.Text.Json.JsonValueType.Object"/>.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
               The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetBoolean">
            <summary>
              Gets the value of the element as a <see cref="T:System.Boolean"/>.
            </summary>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <returns>The value of the element as a <see cref="T:System.Boolean"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is neither <see cref="F:System.Text.Json.JsonValueType.True"/> or
              <see cref="F:System.Text.Json.JsonValueType.False"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetString">
            <summary>
              Gets the value of the element as a <see cref="T:System.String"/>.
            </summary>
            <remarks>
              This method does not create a string representation of values other than JSON strings.
            </remarks>
            <returns>The value of the element as a <see cref="T:System.String"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is neither <see cref="F:System.Text.Json.JsonValueType.String"/> nor <see cref="F:System.Text.Json.JsonValueType.Null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
            <seealso cref="M:System.Text.Json.JsonElement.ToString"/>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetInt32(System.Int32@)">
            <summary>
              Attempts to represent the current JSON number as an <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <returns>
              <see langword="true"/> if the number can be represented as an <see cref="T:System.Int32"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is not <see cref="F:System.Text.Json.JsonValueType.Number"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetInt32">
            <summary>
              Gets the current JSON number as an <see cref="T:System.Int32"/>.
            </summary>
            <returns>The current JSON number as an <see cref="T:System.Int32"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is not <see cref="F:System.Text.Json.JsonValueType.Number"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value cannot be represented as an <see cref="T:System.Int32"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetUInt32(System.UInt32@)">
            <summary>
              Attempts to represent the current JSON number as a <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <returns>
              <see langword="true"/> if the number can be represented as a <see cref="T:System.UInt32"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is not <see cref="F:System.Text.Json.JsonValueType.Number"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetUInt32">
            <summary>
              Gets the current JSON number as a <see cref="T:System.UInt32"/>.
            </summary>
            <returns>The current JSON number as a <see cref="T:System.UInt32"/>.</returns>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is not <see cref="F:System.Text.Json.JsonValueType.Number"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value cannot be represented as a <see cref="T:System.UInt32"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetInt64(System.Int64@)">
            <summary>
              Attempts to represent the current JSON number as a <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <returns>
              <see langword="true"/> if the number can be represented as a <see cref="T:System.Int64"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is not <see cref="F:System.Text.Json.JsonValueType.Number"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetInt64">
            <summary>
              Gets the current JSON number as a <see cref="T:System.Int64"/>.
            </summary>
            <returns>The current JSON number as a <see cref="T:System.Int64"/>.</returns>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is not <see cref="F:System.Text.Json.JsonValueType.Number"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value cannot be represented as a <see cref="T:System.Int64"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetUInt64(System.UInt64@)">
            <summary>
              Attempts to represent the current JSON number as a <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <returns>
              <see langword="true"/> if the number can be represented as a <see cref="T:System.UInt64"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is not <see cref="F:System.Text.Json.JsonValueType.Number"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetUInt64">
            <summary>
              Gets the current JSON number as a <see cref="T:System.UInt64"/>.
            </summary>
            <returns>The current JSON number as a <see cref="T:System.UInt64"/>.</returns>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is not <see cref="F:System.Text.Json.JsonValueType.Number"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value cannot be represented as a <see cref="T:System.UInt64"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetDouble(System.Double@)">
             <summary>
               Attempts to represent the current JSON number as a <see cref="T:System.Double"/>.
             </summary>
             <param name="value">Receives the value.</param>
             <remarks>
               <para>
                 This method does not parse the contents of a JSON string value.
               </para>
            
               <para>
                 On .NET Core this method does not return <see langword="false"/> for values larger than
                 <see cref="F:System.Double.MaxValue"/> (or smaller than <see cref="F:System.Double.MinValue"/>),
                 instead <see langword="true"/> is returned and <see cref="F:System.Double.PositiveInfinity"/> (or
                 <see cref="F:System.Double.NegativeInfinity"/>) is emitted.
               </para>
             </remarks>
             <returns>
               <see langword="true"/> if the number can be represented as a <see cref="T:System.Double"/>,
               <see langword="false"/> otherwise.
             </returns>
             <exception cref="T:System.InvalidOperationException">
               This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is not <see cref="F:System.Text.Json.JsonValueType.Number"/>.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
               The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetDouble">
             <summary>
               Gets the current JSON number as a <see cref="T:System.Double"/>.
             </summary>
             <returns>The current JSON number as a <see cref="T:System.Double"/>.</returns>
             <remarks>
               <para>
                 This method does not parse the contents of a JSON string value.
               </para>
            
               <para>
                 On .NET Core this method returns <see cref="F:System.Double.PositiveInfinity"/> (or
                 <see cref="F:System.Double.NegativeInfinity"/>) for values larger than
                 <see cref="F:System.Double.MaxValue"/> (or smaller than <see cref="F:System.Double.MinValue"/>).
               </para>
             </remarks>
             <exception cref="T:System.InvalidOperationException">
               This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is not <see cref="F:System.Text.Json.JsonValueType.Number"/>.
             </exception>
             <exception cref="T:System.FormatException">
               The value cannot be represented as a <see cref="T:System.Double"/>.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
               The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetSingle(System.Single@)">
             <summary>
               Attempts to represent the current JSON number as a <see cref="T:System.Single"/>.
             </summary>
             <param name="value">Receives the value.</param>
             <remarks>
               <para>
                 This method does not parse the contents of a JSON string value.
               </para>
            
               <para>
                 On .NET Core this method does not return <see langword="false"/> for values larger than
                 <see cref="F:System.Single.MaxValue"/> (or smaller than <see cref="F:System.Single.MinValue"/>),
                 instead <see langword="true"/> is returned and <see cref="F:System.Single.PositiveInfinity"/> (or
                 <see cref="F:System.Single.NegativeInfinity"/>) is emitted.
               </para>
             </remarks>
             <returns>
               <see langword="true"/> if the number can be represented as a <see cref="T:System.Single"/>,
               <see langword="false"/> otherwise.
             </returns>
             <exception cref="T:System.InvalidOperationException">
               This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is not <see cref="F:System.Text.Json.JsonValueType.Number"/>.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
               The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetSingle">
             <summary>
               Gets the current JSON number as a <see cref="T:System.Single"/>.
             </summary>
             <returns>The current JSON number as a <see cref="T:System.Single"/>.</returns>
             <remarks>
               <para>
                 This method does not parse the contents of a JSON string value.
               </para>
            
               <para>
                 On .NET Core this method returns <see cref="F:System.Single.PositiveInfinity"/> (or
                 <see cref="F:System.Single.NegativeInfinity"/>) for values larger than
                 <see cref="F:System.Single.MaxValue"/> (or smaller than <see cref="F:System.Single.MinValue"/>).
               </para>
             </remarks>
             <exception cref="T:System.InvalidOperationException">
               This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is not <see cref="F:System.Text.Json.JsonValueType.Number"/>.
             </exception>
             <exception cref="T:System.FormatException">
               The value cannot be represented as a <see cref="T:System.Single"/>.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
               The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetDecimal(System.Decimal@)">
            <summary>
              Attempts to represent the current JSON number as a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <returns>
              <see langword="true"/> if the number can be represented as a <see cref="T:System.Decimal"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is not <see cref="F:System.Text.Json.JsonValueType.Number"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
            <seealso cref="M:System.Text.Json.JsonElement.GetRawText"/>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetDecimal">
            <summary>
              Gets the current JSON number as a <see cref="T:System.Decimal"/>.
            </summary>
            <returns>The current JSON number as a <see cref="T:System.Decimal"/>.</returns>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is not <see cref="F:System.Text.Json.JsonValueType.Number"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value cannot be represented as a <see cref="T:System.Decimal"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
            <seealso cref="M:System.Text.Json.JsonElement.GetRawText"/>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetDateTime(System.DateTime@)">
            <summary>
              Attempts to represent the current JSON string as a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not create a DateTime representation of values other than JSON strings.
            </remarks>
            <returns>
              <see langword="true"/> if the string can be represented as a <see cref="T:System.DateTime"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is not <see cref="F:System.Text.Json.JsonValueType.String"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetDateTime">
            <summary>
              Gets the value of the element as a <see cref="T:System.DateTime"/>.
            </summary>
            <remarks>
              This method does not create a DateTime representation of values other than JSON strings.
            </remarks>
            <returns>The value of the element as a <see cref="T:System.DateTime"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is not <see cref="F:System.Text.Json.JsonValueType.String"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value cannot be represented as a <see cref="T:System.DateTime"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
            <seealso cref="M:System.Text.Json.JsonElement.ToString"/>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetDateTimeOffset(System.DateTimeOffset@)">
            <summary>
              Attempts to represent the current JSON string as a <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not create a DateTimeOffset representation of values other than JSON strings.
            </remarks>
            <returns>
              <see langword="true"/> if the string can be represented as a <see cref="T:System.DateTimeOffset"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is not <see cref="F:System.Text.Json.JsonValueType.String"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetDateTimeOffset">
            <summary>
              Gets the value of the element as a <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <remarks>
              This method does not create a DateTimeOffset representation of values other than JSON strings.
            </remarks>
            <returns>The value of the element as a <see cref="T:System.DateTimeOffset"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is not <see cref="F:System.Text.Json.JsonValueType.String"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value cannot be represented as a <see cref="T:System.DateTimeOffset"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
            <seealso cref="M:System.Text.Json.JsonElement.ToString"/>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetGuid(System.Guid@)">
            <summary>
              Attempts to represent the current JSON string as a <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not create a Guid representation of values other than JSON strings.
            </remarks>
            <returns>
              <see langword="true"/> if the string can be represented as a <see cref="T:System.Guid"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is not <see cref="F:System.Text.Json.JsonValueType.String"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetGuid">
            <summary>
              Gets the value of the element as a <see cref="T:System.Guid"/>.
            </summary>
            <remarks>
              This method does not create a Guid representation of values other than JSON strings.
            </remarks>
            <returns>The value of the element as a <see cref="T:System.Guid"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is not <see cref="F:System.Text.Json.JsonValueType.String"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value cannot be represented as a <see cref="T:System.Guid"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
            <seealso cref="M:System.Text.Json.JsonElement.ToString"/>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetPropertyName">
            <summary>
              This is an implementation detail and MUST NOT be called by source-package consumers.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetRawText">
            <summary>
              Gets the original input data backing this value, returning it as a <see cref="T:System.String"/>.
            </summary>
            <returns>
             The original input data backing this value, returning it as a <see cref="T:System.String"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetPropertyRawText">
            <summary>
              This is an implementation detail and MUST NOT be called by source-package consumers.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonElement.WriteAsProperty(System.ReadOnlySpan{System.Char},System.Text.Json.Utf8JsonWriter)">
            <summary>
              Write the element into the provided writer as a named object property.
            </summary>
            <param name="propertyName">The name for this value within the JSON object.</param>
            <param name="writer">The writer.</param>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is <see cref="F:System.Text.Json.JsonValueType.Undefined"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.WriteAsProperty(System.ReadOnlySpan{System.Byte},System.Text.Json.Utf8JsonWriter)">
            <summary>
              Write the element into the provided writer as a named object property.
            </summary>
            <param name="utf8PropertyName">
              The name for this value within the JSON object, as UTF-8 text.
            </param>
            <param name="writer">The writer.</param>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is <see cref="F:System.Text.Json.JsonValueType.Undefined"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.WriteAsValue(System.Text.Json.Utf8JsonWriter)">
            <summary>
              Write the element into the provided writer as a value.
            </summary>
            <param name="writer">The writer.</param>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is <see cref="F:System.Text.Json.JsonValueType.Undefined"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.EnumerateArray">
            <summary>
              Get an enumerator to enumerate the values in the JSON array represented by this JsonElement.
            </summary>
            <returns>
              An enumerator to enumerate the values in the JSON array represented by this JsonElement.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is not <see cref="F:System.Text.Json.JsonValueType.Array"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.EnumerateObject">
            <summary>
              Get an enumerator to enumerate the properties in the JSON object represented by this JsonElement.
            </summary>
            <returns>
              An enumerator to enumerate the properties in the JSON object represented by this JsonElement.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.Type"/> is not <see cref="F:System.Text.Json.JsonValueType.Object"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.ToString">
             <summary>
               Gets a string representation for the current value appropriate to the value type.
             </summary>
             <remarks>
               <para>
                 For <see cref="F:System.Text.Json.JsonValueType.Null"/>, <see cref="F:System.String.Empty"/> is returned.
               </para>
            
               <para>
                 For <see cref="F:System.Text.Json.JsonValueType.True"/>, <see cref="F:System.Boolean.TrueString"/> is returned.
               </para>
            
               <para>
                 For <see cref="F:System.Text.Json.JsonValueType.False"/>, <see cref="F:System.Boolean.FalseString"/> is returned.
               </para>
             
               <para>
                 For <see cref="F:System.Text.Json.JsonValueType.String"/>, the value of <see cref="M:System.Text.Json.JsonElement.GetString"/>() is returned.
               </para>
            
               <para>
                 For other types, the value of <see cref="M:System.Text.Json.JsonElement.GetRawText"/>() is returned.
               </para>
             </remarks>
             <returns>
               A string representation for the current value appropriate to the value type.
             </returns>
             <exception cref="T:System.ObjectDisposedException">
               The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.Clone">
            <summary>
              Get a JsonElement which can be safely stored beyond the lifetime of the
              original <see cref="T:System.Text.Json.JsonDocument"/>.
            </summary>
            <returns>
              A JsonElement which can be safely stored beyond the lifetime of the
              original <see cref="T:System.Text.Json.JsonDocument"/>.
            </returns>
            <remarks>
              If this JsonElement is itself the output of a previous call to Clone, or
              a value contained within another JsonElement which was the output of a previous
              call to Clone, this method results in no additional memory allocation.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.TryCreateDateTimeOffset(System.DateTime,System.Boolean,System.Int32,System.Int32,System.DateTimeOffset@)">
            <summary>
            Overflow-safe DateTimeOffset factory.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.TryCreateDateTimeOffset(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.DateTimeOffset@)">
            <summary>
            Overflow-safe DateTimeOffset factory.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.TryCreateDateTimeOffsetInterpretingDataAsLocalTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeOffset@)">
            <summary>
            Overflow-safe DateTimeOffset/Local time conversion factory.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.TryCreateDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind,System.DateTime@)">
            <summary>
            Overflow-safe DateTime factory.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.IsValidUnicodeScalar(System.UInt32)">
            <summary>
            Returns <see langword="true"/> iff <paramref name="value"/> is a valid Unicode scalar
            value, i.e., is in [ U+0000..U+D7FF ], inclusive; or [ U+E000..U+10FFFF ], inclusive.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.IsInRangeInclusive(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Returns <see langword="true"/> iff <paramref name="value"/> is between
            <paramref name="lowerBound"/> and <paramref name="upperBound"/>, inclusive.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.IsInRangeInclusive(System.Byte,System.Byte,System.Byte)">
            <summary>
            Returns <see langword="true"/> iff <paramref name="value"/> is between
            <paramref name="lowerBound"/> and <paramref name="upperBound"/>, inclusive.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.IsInRangeInclusive(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns <see langword="true"/> iff <paramref name="value"/> is between
            <paramref name="lowerBound"/> and <paramref name="upperBound"/>, inclusive.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.IsInRangeInclusive(System.Int64,System.Int64,System.Int64)">
            <summary>
            Returns <see langword="true"/> iff <paramref name="value"/> is between
            <paramref name="lowerBound"/> and <paramref name="upperBound"/>, inclusive.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.IsInRangeInclusive(System.Double,System.Double,System.Double)">
            <summary>
            Returns <see langword="true"/> iff <paramref name="value"/> is between
            <paramref name="lowerBound"/> and <paramref name="upperBound"/>, inclusive.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.IsInRangeInclusive(System.Text.Json.JsonTokenType,System.Text.Json.JsonTokenType,System.Text.Json.JsonTokenType)">
            <summary>
            Returns <see langword="true"/> iff <paramref name="value"/> is between
            <paramref name="lowerBound"/> and <paramref name="upperBound"/>, inclusive.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.IsDigit(System.Byte)">
            <summary>
            Returns <see langword="true"/> iff <paramref name="value"/> is in the range [0..9].
            Otherwise, returns <see langword="false"/>.
            </summary>
        </member>
        <member name="T:System.Text.Json.JsonProperty">
            <summary>
              Represents a single property for a JSON object.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonProperty.Value">
            <summary>
              The value of this property.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonProperty.#ctor(System.Text.Json.JsonElement)">
            <summary>
              This is an implementation detail and MUST NOT be called by source-package consumers.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonProperty.Name">
            <summary>
              The name of this property.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonProperty.ToString">
            <summary>
              Provides a <see cref="T:System.String"/> representation of the property for
              debugging purposes.
            </summary>
            <returns>
              A string containing the un-interpreted value of the property, beginning
              at the declaring open-quote and ending at the last character that is part of
              the value.
            </returns>
        </member>
        <member name="T:System.Text.Json.JsonReaderException">
            <summary>
            Defines a custom exception object that is thrown by the <see cref="T:System.Text.Json.Utf8JsonReader"/> whenever it
            encounters an invalid JSON text while reading through it. This exception is also thrown
            whenever you read past the defined maximum depth.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonReaderException.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Creates a new exception object to relay error information to the user.
            </summary>
            <param name="message">The context specific error message.</param>
            <param name="lineNumber">The line number at which the invalid JSON was encountered (starting at 0).</param>
            <param name="bytePositionInLine">The byte count within the current line where the invalid JSON was encountered (starting at 0).</param>
            <remarks>
            Note that the <paramref name="bytePositionInLine"/> counts the number of bytes (i.e. UTF-8 code units) and not characters or scalars.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonReaderException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:System.Text.Json.JsonReaderException.LineNumber">
            <summary>
            The number of lines read so far before the exception (starting at 0).
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonReaderException.BytePositionInLine">
            <summary>
            The number of bytes read within the current line before the exception (starting at 0).
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonReaderHelper.EncodeToUtf8Bytes(System.UInt32,System.Span{System.Byte},System.Int32@)">
            <summary>
            Copies the UTF-8 code unit representation of this scalar to an output buffer.
            The buffer must be large enough to hold the required number of <see cref="T:System.Byte"/>s.
            </summary>
        </member>
        <member name="T:System.Text.Json.JsonReaderOptions">
            <summary>
            Provides the ability for the user to define custom behavior when reading JSON.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonReaderOptions.CommentHandling">
            <summary>
            Defines how the <see cref="T:System.Text.Json.Utf8JsonReader"/> should handle comments when reading through the JSON.
            By default <exception cref="T:System.Text.Json.JsonReaderException"/> is thrown if a comment is encountered.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonReaderOptions.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON, with the default (i.e. 0) indicating a max depth of 64.
            Reading past this depth will throw a <exception cref="T:System.Text.Json.JsonReaderException"/>.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonReaderOptions.AllowTrailingCommas">
            <summary>
            Defines whether an extra comma at the end of a list of JSON values in an object or array
            is allowed (and ignored) within the JSON payload being read.
            By default, it's set to false, and <exception cref="T:System.Text.Json.JsonReaderException"/> is thrown if a trailing comma is encountered.
            </summary>
        </member>
        <member name="T:System.Text.Json.JsonReaderState">
            <summary>
            Defines an opaque type that holds and saves all the relevant state information which must be provided
            to the <see cref="T:System.Text.Json.Utf8JsonReader"/> to continue reading after processing incomplete data.
            This type is required to support reentrancy when reading incomplete data, and to continue
            reading once more data is available. Unlike the <see cref="T:System.Text.Json.Utf8JsonReader"/>, which is a ref struct,
            this type can survive across async/await boundaries and hence this type is required to provide
            support for reading in more data asynchronously before continuing with a new instance of the <see cref="T:System.Text.Json.Utf8JsonReader"/>.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonReaderState.BytesConsumed">
            <summary>
            Returns the total amount of bytes consumed by the <see cref="T:System.Text.Json.Utf8JsonReader"/> so far
            for the given UTF-8 encoded input text.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonReaderState.Position">
            <summary>
            Returns the current <see cref="T:System.SequencePosition"/> within the provided UTF-8 encoded
            input ReadOnlySequence&lt;byte&gt;. If the <see cref="T:System.Text.Json.Utf8JsonReader"/> was constructed
            with a ReadOnlySpan&lt;byte&gt; instead, this will always return a default <see cref="T:System.SequencePosition"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonReaderState.#ctor(System.Text.Json.JsonReaderOptions)">
            <summary>
            Constructs a new <see cref="T:System.Text.Json.JsonReaderState"/> instance.
            </summary>
            <param name="options">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonReader"/>
            that is different from the JSON RFC (for example how to handle comments or maximum depth allowed when reading).
            By default, the <see cref="T:System.Text.Json.Utf8JsonReader"/> follows the JSON RFC strictly (i.e. comments within the JSON are invalid) and reads up to a maximum depth of 64.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the max depth is set to a non-positive value (&lt; 0)
            </exception>
            <remarks>
            An instance of this state must be passed to the <see cref="T:System.Text.Json.Utf8JsonReader"/> ctor with the JSON data.
            Unlike the <see cref="T:System.Text.Json.Utf8JsonReader"/>, which is a ref struct, the state can survive
            across async/await boundaries and hence this type is required to provide support for reading
            in more data asynchronously before continuing with a new instance of the <see cref="T:System.Text.Json.Utf8JsonReader"/>.
            </remarks>
        </member>
        <member name="P:System.Text.Json.JsonReaderState.Options">
            <summary>
            Gets the custom behavior when reading JSON using
            the <see cref="T:System.Text.Json.Utf8JsonReader"/> that may deviate from strict adherence
            to the JSON specification, which is the default behavior.
            </summary>
        </member>
        <member name="T:System.Text.Json.JsonTokenType">
            <summary>
            This enum defines the various JSON tokens that make up a JSON text and is used by
            the <see cref="T:System.Text.Json.Utf8JsonReader"/> when moving from one token to the next.
            The <see cref="T:System.Text.Json.Utf8JsonReader"/> starts at 'None' by default. The 'Comment' enum value
            is only ever reached in a specific <see cref="T:System.Text.Json.Utf8JsonReader"/> mode and is not
            reachable by default.
            </summary>
        </member>
        <member name="T:System.Text.Json.JsonValueType">
            <summary>
              Specifies the data type of a JSON value.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonValueType.Undefined">
            <summary>
              Indicates that there is no value (as distinct from <see cref="F:System.Text.Json.JsonValueType.Null"/>).
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonValueType.Object">
            <summary>
              Indicates that a value is a JSON object.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonValueType.Array">
            <summary>
              Indicates that a value is a JSON array.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonValueType.String">
            <summary>
              Indicates that a value is a JSON string.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonValueType.Number">
            <summary>
              Indicates that a value is a JSON number.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonValueType.True">
            <summary>
              Indicates that a value is the JSON value <c>true</c>.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonValueType.False">
            <summary>
              Indicates that a value is the JSON value <c>false</c>.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonValueType.Null">
            <summary>
              Indicates that a value is the JSON value <c>null</c>.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonWriterHelper.IsUtf8ContinuationByte(System.Byte)">
            <summary>
            Returns <see langword="true"/> iff <paramref name="value"/> is a UTF-8 continuation byte.
            A UTF-8 continuation byte is a byte whose value is in the range 0x80-0xBF, inclusive.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonWriterHelper.IsLowWordSurrogate(System.UInt32)">
            <summary>
            Returns <see langword="true"/> iff the low word of <paramref name="char"/> is a UTF-16 surrogate.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonWriterHelper.ReplacementChar">
            <summary>
            A scalar that represents the Unicode replacement character U+FFFD.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonWriterHelper.Int32LsbToHexDigit(System.Int32)">
            <summary>
            Converts a number 0 - 15 to its associated hex character '0' - 'f' as byte.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonWriterHelper.ToUtf8(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@)">
             <summary>
             Converts a span containing a sequence of UTF-16 bytes into UTF-8 bytes.
            
             This method will consume as many of the input bytes as possible.
            
             On successful exit, the entire input was consumed and encoded successfully. In this case, <paramref name="bytesConsumed"/> will be
             equal to the length of the <paramref name="utf16Source"/> and <paramref name="bytesWritten"/> will equal the total number of bytes written to
             the <paramref name="utf8Destination"/>.
             </summary>
             <param name="utf16Source">A span containing a sequence of UTF-16 bytes.</param>
             <param name="utf8Destination">A span to write the UTF-8 bytes into.</param>
             <param name="bytesConsumed">On exit, contains the number of bytes that were consumed from the <paramref name="utf16Source"/>.</param>
             <param name="bytesWritten">On exit, contains the number of bytes written to <paramref name="utf8Destination"/></param>
             <returns>A <see cref="T:System.Buffers.OperationStatus"/> value representing the state of the conversion.</returns>
        </member>
        <member name="T:System.Text.Json.JsonWriterOptions">
            <summary>
            Provides the ability for the user to define custom behavior when writing JSON
            using the <see cref="T:System.Text.Json.Utf8JsonWriter"/>. By default, the JSON is written without
            any indentation or extra white space. Also, the <see cref="T:System.Text.Json.Utf8JsonWriter"/> will
            throw an exception if the user attempts to write structurally invalid JSON.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonWriterOptions.Indented">
            <summary>
            Defines whether the <see cref="T:System.Text.Json.Utf8JsonWriter"/> should pretty print the JSON which includes:
            indenting nested JSON tokens, adding new lines, and adding white space between property names and values.
            By default, the JSON is written without any extra white space.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonWriterOptions.SkipValidation">
            <summary>
            Defines whether the <see cref="T:System.Text.Json.Utf8JsonWriter"/> should skip structural validation and allow
            the user to write invalid JSON, when set to true. If set to false, any attempts to write invalid JSON will result in
            a <exception cref="T:System.InvalidOperationException"/> to be thrown.
            </summary>
            <remarks>
            If the JSON being written is known to be correct,
            then skipping validation (by setting it to true) could improve performance.
            An example of invalid JSON where the writer will throw (when SkipValidation
            is set to false) is when you write a value within a JSON object
            without a property name. 
            </remarks>
        </member>
        <member name="T:System.Text.Json.Utf8JsonReader">
            <summary>
            Provides a high-performance API for forward-only, read-only access to the UTF-8 encoded JSON text.
            It processes the text sequentially with no caching and adheres strictly to the JSON RFC
            by default (https://tools.ietf.org/html/rfc8259). When it encounters invalid JSON, it throws
            a JsonReaderException with basic error information like line number and byte position on the line.
            Since this type is a ref struct, it does not directly support async. However, it does provide
            support for reentrancy to read incomplete data, and continue reading once more data is presented.
            To be able to set max depth while reading OR allow skipping comments, create an instance of 
            <see cref="T:System.Text.Json.JsonReaderState"/> and pass that in to the reader.
            </summary>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte}@,System.Boolean,System.Text.Json.JsonReaderState)">
            <summary>
            Constructs a new <see cref="T:System.Text.Json.Utf8JsonReader"/> instance.
            </summary>
            <param name="jsonData">The ReadOnlySequence&lt;byte&gt; containing the UTF-8 encoded JSON text to process.</param>
            <param name="isFinalBlock">True when the input span contains the entire data to process.
            Set to false only if it is known that the input span contains partial data with more data to follow.</param>
            <param name="state">If this is the first call to the ctor, pass in a default state. Otherwise,
            capture the state from the previous instance of the <see cref="T:System.Text.Json.Utf8JsonReader"/> and pass that back.</param>
            <remarks>
            Since this type is a ref struct, it is a stack-only type and all the limitations of ref structs apply to it.
            This is the reason why the ctor accepts a <see cref="T:System.Text.Json.JsonReaderState"/>.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.ConsumeValueMultiSegment(System.Byte)">
            <summary>
            This method contains the logic for processing the next value token and determining
            what type of data it is.
            </summary>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.ConsumeNextTokenMultiSegment(System.Byte)">
            <summary>
            This method consumes the next token regardless of whether we are inside an object or an array.
            For an object, it reads the next property name token. For an array, it just reads the next value.
            </summary>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetString">
            <summary>
            Reads the next JSON token value from the source, unescaped, and transcoded as a <see cref="T:System.String"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of the JSON token that is not a string
            (i.e. other than <see cref="F:System.Text.Json.JsonTokenType.String"/> or <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/>).
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            I will also throw when the JSON string contains invalid UTF-8 bytes, or invalid UTF-16 surrogates.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetBoolean">
            <summary>
            Reads the next JSON token value from the source as a <see cref="T:System.Boolean"/>.
            Returns true if the TokenType is JsonTokenType.True and false if the TokenType is JsonTokenType.False.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a boolean (i.e. <see cref="F:System.Text.Json.JsonTokenType.True"/> or <see cref="F:System.Text.Json.JsonTokenType.False"/>).
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetInt32">
            <summary>
            Reads the next JSON token value from the source and parses it to an <see cref="T:System.Int32"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to an <see cref="T:System.Int32"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value is either of incorrect numeric format (for example if it contains a decimal or 
            is written in scientific notation) or, it represents a number less than <see cref="F:System.Int32.MinValue"/> or greater 
            than <see cref="F:System.Int32.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetInt64">
            <summary>
            Reads the next JSON token value from the source and parses it to a <see cref="T:System.Int64"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Int64"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value is either of incorrect numeric format (for example if it contains a decimal or 
            is written in scientific notation) or, it represents a number less than <see cref="F:System.Int64.MinValue"/> or greater 
            than <see cref="F:System.Int64.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetUInt32">
            <summary>
            Reads the next JSON token value from the source and parses it to a <see cref="T:System.UInt32"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.UInt32"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value is either of incorrect numeric format (for example if it contains a decimal or 
            is written in scientific notation) or, it represents a number less than <see cref="F:System.UInt32.MinValue"/> or greater 
            than <see cref="F:System.UInt32.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetUInt64">
            <summary>
            Reads the next JSON token value from the source and parses it to a <see cref="T:System.UInt64"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.UInt64"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value is either of incorrect numeric format (for example if it contains a decimal or 
            is written in scientific notation) or, it represents a number less than <see cref="F:System.UInt64.MinValue"/> or greater 
            than <see cref="F:System.UInt64.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetSingle">
            <summary>
            Reads the next JSON token value from the source and parses it to a <see cref="T:System.Single"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Single"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value represents a number less than <see cref="F:System.Single.MinValue"/> or greater 
            than <see cref="F:System.Single.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetDouble">
            <summary>
            Reads the next JSON token value from the source and parses it to a <see cref="T:System.Double"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Double"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value represents a number less than <see cref="F:System.Double.MinValue"/> or greater 
            than <see cref="F:System.Double.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetDecimal">
            <summary>
            Reads the next JSON token value from the source and parses it to a <see cref="T:System.Decimal"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Decimal"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value represents a number less than <see cref="F:System.Decimal.MinValue"/> or greater 
            than <see cref="F:System.Decimal.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetDateTime">
            <summary>
            Reads the next JSON token value from the source and parses it to a <see cref="T:System.DateTime"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.DateTime"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.String"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value is of an unsupported format. Only a subset of ISO 8601 formats are supported.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetDateTimeOffset">
            <summary>
            Reads the next JSON token value from the source and parses it to a <see cref="T:System.DateTimeOffset"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.DateTimeOffset"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.String"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value is of an unsupported format. Only a subset of ISO 8601 formats are supported.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetGuid">
            <summary>
            Reads the next JSON token value from the source and parses it to a <see cref="T:System.Guid"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Guid"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.String"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value is of an unsupported format for a Guid.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt32(System.Int32@)">
            <summary>
            Reads the next JSON token value from the source and parses it to an <see cref="T:System.Int32"/>.
            Returns true if the entire UTF-8 encoded token value can be successfully 
            parsed to an <see cref="T:System.Int32"/> value.
            Returns false otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt64(System.Int64@)">
            <summary>
            Reads the next JSON token value from the source and parses it to a <see cref="T:System.Int64"/>.
            Returns true if the entire UTF-8 encoded token value can be successfully 
            parsed to a <see cref="T:System.Int64"/> value.
            Returns false otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt32(System.UInt32@)">
            <summary>
            Reads the next JSON token value from the source and parses it to a <see cref="T:System.UInt32"/>.
            Returns true if the entire UTF-8 encoded token value can be successfully 
            parsed to a <see cref="T:System.UInt32"/> value.
            Returns false otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt64(System.UInt64@)">
            <summary>
            Reads the next JSON token value from the source and parses it to a <see cref="T:System.UInt64"/>.
            Returns true if the entire UTF-8 encoded token value can be successfully 
            parsed to a <see cref="T:System.UInt64"/> value.
            Returns false otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetSingle(System.Single@)">
            <summary>
            Reads the next JSON token value from the source and parses it to a <see cref="T:System.Single"/>.
            Returns true if the entire UTF-8 encoded token value can be successfully 
            parsed to a <see cref="T:System.Single"/> value.
            Returns false otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetDouble(System.Double@)">
            <summary>
            Reads the next JSON token value from the source and parses it to a <see cref="T:System.Double"/>.
            Returns true if the entire UTF-8 encoded token value can be successfully 
            parsed to a <see cref="T:System.Double"/> value.
            Returns false otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetDecimal(System.Decimal@)">
            <summary>
            Reads the next JSON token value from the source and parses it to a <see cref="T:System.Decimal"/>.
            Returns true if the entire UTF-8 encoded token value can be successfully 
            parsed to a <see cref="T:System.Decimal"/> value.
            Returns false otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTime(System.DateTime@)">
            <summary>
            Reads the next JSON token value from the source and parses it to a <see cref="T:System.DateTime"/>.
            Returns true if the entire UTF-8 encoded token value can be successfully
            parsed to a <see cref="T:System.DateTime"/> value.
            Returns false otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.String"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTimeOffset(System.DateTimeOffset@)">
            <summary>
            Reads the next JSON token value from the source and parses it to a <see cref="T:System.DateTimeOffset"/>.
            Returns true if the entire UTF-8 encoded token value can be successfully
            parsed to a <see cref="T:System.DateTimeOffset"/> value.
            Returns false otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.String"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetGuid(System.Guid@)">
            <summary>
            Reads the next JSON token value from the source and parses it to a <see cref="T:System.Guid"/>.
            Returns <see langword="true"/> if the entire UTF-8 encoded token value can be successfully
            parsed to a <see cref="T:System.Guid"/> value. Only supports <see cref="T:System.Guid"/> values with hyphens
            and without any surrounding decorations.
            Returns <see langword="false"/> otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.String"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.ValueSpan">
            <summary>
            Gets the value of the last processed token as a ReadOnlySpan&lt;byte&gt; slice
            of the input payload. If the JSON is provided within a ReadOnlySequence&lt;byte&gt;
            and the slice that represents the token value fits in a single segment, then
            <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan"/> will contain the sliced value since it can be represented as a span.
            Otherwise, the <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence"/> will contain the token value.
            </summary>
            <remarks>
            If <see cref="P:System.Text.Json.Utf8JsonReader.HasValueSequence"/> is true, <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan"/> contains useless data, likely for
            a previous single-segment token. Therefore, only access <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan"/> if <see cref="P:System.Text.Json.Utf8JsonReader.HasValueSequence"/> is false.
            Otherwise, the token value must be accessed from <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence"/>.
            </remarks>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.BytesConsumed">
            <summary>
            Returns the total amount of bytes consumed by the <see cref="T:System.Text.Json.Utf8JsonReader"/> so far
            for the current instance of the <see cref="T:System.Text.Json.Utf8JsonReader"/> with the given UTF-8 encoded input text.
            </summary>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.CurrentDepth">
            <summary>
            Tracks the recursive depth of the nested objects / arrays within the JSON text
            processed so far. This provides the depth of the current token.
            </summary>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.TokenType">
            <summary>
            Gets the type of the last processed JSON token in the UTF-8 encoded JSON text.
            </summary>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.HasValueSequence">
            <summary>
            Lets the caller know which of the two 'Value' properties to read to get the 
            token value. For input data within a ReadOnlySpan&lt;byte&gt; this will
            always return false. For input data within a ReadOnlySequence&lt;byte&gt;, this
            will only return true if the token value straddles more than a single segment and
            hence couldn't be represented as a span.
            </summary>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.ValueSequence">
            <summary>
            Gets the value of the last processed token as a ReadOnlySpan&lt;byte&gt; slice
            of the input payload. If the JSON is provided within a ReadOnlySequence&lt;byte&gt;
            and the slice that represents the token value fits in a single segment, then
            <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan"/> will contain the sliced value since it can be represented as a span.
            Otherwise, the <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence"/> will contain the token value.
            </summary>
            <remarks>
            If <see cref="P:System.Text.Json.Utf8JsonReader.HasValueSequence"/> is false, <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence"/> contains useless data, likely for
            a previous multi-segment token. Therefore, only access <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence"/> if <see cref="P:System.Text.Json.Utf8JsonReader.HasValueSequence"/> is true.
            Otherwise, the token value must be accessed from <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan"/>.
            </remarks>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.Position">
            <summary>
            Returns the current <see cref="T:System.SequencePosition"/> within the provided UTF-8 encoded
            input ReadOnlySequence&lt;byte&gt;. If the <see cref="T:System.Text.Json.Utf8JsonReader"/> was constructed
            with a ReadOnlySpan&lt;byte&gt; instead, this will always return a default <see cref="T:System.SequencePosition"/>.
            </summary>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.CurrentState">
            <summary>
            Returns the current snapshot of the <see cref="T:System.Text.Json.Utf8JsonReader"/> state which must
            be captured by the caller and passed back in to the <see cref="T:System.Text.Json.Utf8JsonReader"/> ctor with more data.
            Unlike the <see cref="T:System.Text.Json.Utf8JsonReader"/>, which is a ref struct, the state can survive
            across async/await boundaries and hence this type is required to provide support for reading
            in more data asynchronously before continuing with a new instance of the <see cref="T:System.Text.Json.Utf8JsonReader"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
            <summary>
            Constructs a new <see cref="T:System.Text.Json.Utf8JsonReader"/> instance.
            </summary>
            <param name="jsonData">The ReadOnlySpan&lt;byte&gt; containing the UTF-8 encoded JSON text to process.</param>
            <param name="isFinalBlock">True when the input span contains the entire data to process.
            Set to false only if it is known that the input span contains partial data with more data to follow.</param>
            <param name="state">If this is the first call to the ctor, pass in a default state. Otherwise,
            capture the state from the previous instance of the <see cref="T:System.Text.Json.Utf8JsonReader"/> and pass that back.</param>
            <remarks>
            Since this type is a ref struct, it is a stack-only type and all the limitations of ref structs apply to it.
            This is the reason why the ctor accepts a <see cref="T:System.Text.Json.JsonReaderState"/>.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.Read">
            <summary>
            Read the next JSON token from input source.
            </summary>
            <returns>True if the token was read successfully, else false.</returns>
            <exception cref="T:System.Text.Json.JsonReaderException">
            Thrown when an invalid JSON token is encountered according to the JSON RFC
            or if the current depth exceeds the recursive limit set by the max depth.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TextEquals(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compares the UTF-8 encoded text to the unescaped JSON token value in the source and returns true if they match.
            </summary>
            <param name="otherUtf8Text">The UTF-8 encoded text to compare against.</param>
            <returns>True if the JSON token value in the source matches the UTF-8 encoded look up text.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to find a text match on a JSON token that is not a string
            (i.e. other than <see cref="F:System.Text.Json.JsonTokenType.String"/> or <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/>).
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <remarks>
            If the look up text is invalid UTF-8 text, the method will return false since you cannot have 
            invalid UTF-8 within the JSON payload.
            </remarks>
            <remarks>
            The comparison of the JSON token value in the source and the look up text is done by first unescaping the JSON value in source,
            if required. The look up text is matched as is, without any modifications to it.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TextEquals(System.ReadOnlySpan{System.Char})">
            <summary>
            Compares the UTF-16 encoded text to the unescaped JSON token value in the source and returns true if they match.
            </summary>
            <param name="otherText">The UTF-16 encoded text to compare against.</param>
            <returns>True if the JSON token value in the source matches the UTF-16 encoded look up text.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to find a text match on a JSON token that is not a string
            (i.e. other than <see cref="F:System.Text.Json.JsonTokenType.String"/> or <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/>).
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <remarks>
            If the look up text is invalid or incomplete UTF-16 text (i.e. unpaired surrogates), the method will return false
            since you cannot have invalid UTF-16 within the JSON payload.
            </remarks>
            <remarks>
            The comparison of the JSON token value in the source and the look up text is done by first unescaping the JSON value in source,
            if required. The look up text is matched as is, without any modifications to it.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.ConsumeValue(System.Byte)">
            <summary>
            This method contains the logic for processing the next value token and determining
            what type of data it is.
            </summary>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.ConsumeNextToken(System.Byte)">
            <summary>
            This method consumes the next token regardless of whether we are inside an object or an array.
            For an object, it reads the next property name token. For an array, it just reads the next value.
            </summary>
        </member>
        <member name="T:System.Text.Json.Utf8JsonWriter">
            <summary>
            Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.
            </summary>
            <remarks>
            It writes the text sequentially with no caching and adheres to the JSON RFC
            by default (https://tools.ietf.org/html/rfc8259), with the exception of writing comments.
            </remarks>
            <remarks>
            When the user attempts to write invalid JSON and validation is enabled, it throws
            an <see cref="T:System.InvalidOperationException"/> with a context specific error message.
            </remarks>
            <remarks>
            To be able to format the output with indentation and whitespace OR to skip validation, create an instance of 
            <see cref="T:System.Text.Json.JsonWriterOptions"/> and pass that in to the writer.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)">
            <summary>
            Writes the property name and <see cref="T:System.DateTime"/> value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON string as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.DateTime"/> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat"/> , for example: 2017-06-12T05:30:45.7680000.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)">
            <summary>
            Writes the property name and <see cref="T:System.DateTime"/> value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON string as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.DateTime"/> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat"/> , for example: 2017-06-12T05:30:45.7680000.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)">
            <summary>
            Writes the property name and <see cref="T:System.DateTime"/> value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <param name="value">The value to be written as a JSON string as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.DateTime"/> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat"/> , for example: 2017-06-12T05:30:45.7680000.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)">
            <summary>
            Writes the property name and <see cref="T:System.DateTimeOffset"/> value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON string as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.DateTimeOffset"/> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat"/> , for example: 2017-06-12T05:30:45.7680000-07:00.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)">
            <summary>
            Writes the property name and <see cref="T:System.DateTimeOffset"/> value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON string as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.DateTimeOffset"/> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat"/> , for example: 2017-06-12T05:30:45.7680000-07:00.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)">
            <summary>
            Writes the property name and <see cref="T:System.DateTimeOffset"/> value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <param name="value">The value to be written as a JSON string as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.DateTimeOffset"/> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat"/> , for example: 2017-06-12T05:30:45.7680000-07:00.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)">
            <summary>
            Writes the property name and <see cref="T:System.Decimal"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Decimal"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'G').
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)">
            <summary>
            Writes the property name and <see cref="T:System.Decimal"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Decimal"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'G').
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)">
            <summary>
            Writes the property name and <see cref="T:System.Decimal"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Decimal"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'G').
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)">
            <summary>
            Writes the property name and <see cref="T:System.Double"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Double"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'G').
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)">
            <summary>
            Writes the property name and <see cref="T:System.Double"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Double"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'G').
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)">
            <summary>
            Writes the property name and <see cref="T:System.Double"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Double"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'G').
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)">
            <summary>
            Writes the property name and <see cref="T:System.Single"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Single"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'G').
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)">
            <summary>
            Writes the property name and <see cref="T:System.Single"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Single"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'G').
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)">
            <summary>
            Writes the property name and <see cref="T:System.Single"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Single"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'G').
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the property name and value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="utf8FormattedNumber">The value to be written as a JSON number as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="utf8FormattedNumber"/> does not represent a valid JSON number.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the property name and value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <param name="utf8FormattedNumber">The value to be written as a JSON number as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="utf8FormattedNumber"/> does not represent a valid JSON number.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)">
            <summary>
            Writes the property name and <see cref="T:System.Guid"/> value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON string as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Guid"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)">
            <summary>
            Writes the property name and <see cref="T:System.Guid"/> value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON string as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Guid"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)">
            <summary>
            Writes the property name and <see cref="T:System.Guid"/> value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <param name="value">The value to be written as a JSON string as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Guid"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)">
            <summary>
            Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)">
            <summary>
            Writes the property name and <see cref="T:System.Boolean"/> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)">
            <summary>
            Writes the property name and <see cref="T:System.Boolean"/> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)">
            <summary>
            Writes the property name and <see cref="T:System.Boolean"/> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <param name="value">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)">
            <summary>
            Writes the property name and <see cref="T:System.Int64"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)">
            <summary>
            Writes the property name and <see cref="T:System.Int64"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)">
            <summary>
            Writes the property name and <see cref="T:System.Int64"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)">
            <summary>
            Writes the property name and <see cref="T:System.Int32"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int32"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)">
            <summary>
            Writes the property name and <see cref="T:System.Int32"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int32"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
            Writes the property name and <see cref="T:System.Int32"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int32"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)">
            <summary>
            Writes the property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</param>
            <remarks>
            The property name and value is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name or value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</param>
            <remarks>
            The property name and value is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name or value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <param name="utf8Value">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</param>
            <remarks>
            The property name and value is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name or value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</param>
            <remarks>
            The property name and value is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name or value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <param name="value">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</param>
            <remarks>
            The property name and value is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name or value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="utf8Value">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</param>
            <remarks>
            The property name and value is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name or value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="utf8Value">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</param>
            <remarks>
            The property name and value is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name or value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)">
            <summary>
            Writes the UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</param>
            <remarks>
            The property name and value is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name or value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)">
            <summary>
            Writes the UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <param name="value">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</param>
            <remarks>
            The property name and value is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name or value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)">
            <summary>
            Writes the property name and <see cref="T:System.UInt64"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.UInt64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)">
            <summary>
            Writes the property name and <see cref="T:System.UInt64"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.UInt64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)">
            <summary>
            Writes the property name and <see cref="T:System.UInt64"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.UInt64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)">
            <summary>
            Writes the property name and <see cref="T:System.UInt32"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.UInt32"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)">
            <summary>
            Writes the property name and <see cref="T:System.UInt32"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.UInt32"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)">
            <summary>
            Writes the property name and <see cref="T:System.UInt32"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <param name="value">The value to be written as a JSON number as part of the name/value pair.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.UInt32"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)">
            <summary>
            Writes the string text value (as a JSON comment).
            </summary>
            <param name="value">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within /*..*/.</param>
            <remarks>
            The comment value is not escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified value is too large OR if the given string text value contains a comment delimiter (i.e. */).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the UTF-16 text value (as a JSON comment).
            </summary>
            <param name="value">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within /*..*/.</param>
            <remarks>
            The comment value is not escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified value is too large OR if the given UTF-16 text value contains a comment delimiter (i.e. */).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the UTF-8 text value (as a JSON comment).
            </summary>
            <param name="utf8Value">The UTF-8 encoded value to be written as a JSON comment within /*..*/.</param>
            <remarks>
            The comment value is not escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified value is too large OR if the given UTF-8 text value contains a comment delimiter (i.e. */).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)">
            <summary>
            Writes the <see cref="T:System.DateTime"/> value (as a JSON string) as an element of a JSON array.
            </summary>
            <param name="value">The value to be written as a JSON string as an element of a JSON array.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.DateTime"/> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat"/> , for example: 2017-06-12T05:30:45.7680000.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)">
            <summary>
            Writes the <see cref="T:System.DateTimeOffset"/> value (as a JSON string) as an element of a JSON array.
            </summary>
            <param name="value">The value to be written as a JSON string as an element of a JSON array.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.DateTimeOffset"/> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat"/> , for example: 2017-06-12T05:30:45.7680000-07:00.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)">
            <summary>
            Writes the <see cref="T:System.Decimal"/> value (as a JSON number) as an element of a JSON array.
            </summary>
            <param name="value">The value to be written as a JSON number as an element of a JSON array.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Decimal"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'G').
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)">
            <summary>
            Writes the <see cref="T:System.Double"/> value (as a JSON number) as an element of a JSON array.
            </summary>
            <param name="value">The value to be written as a JSON number as an element of a JSON array.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Double"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'G').
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)">
            <summary>
            Writes the <see cref="T:System.Single"/> value (as a JSON number) as an element of a JSON array.
            </summary>
            <param name="value">The value to be written as a JSON number as an element of a JSON array.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Single"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'G').
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the value (as a JSON number) as an element of a JSON array.
            </summary>
            <param name="utf8FormattedNumber">The value to be written as a JSON number as an element of a JSON array.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="utf8FormattedNumber"/> does not represent a valid JSON number.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int32"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)">
            <summary>
            Writes the <see cref="T:System.Guid"/> value (as a JSON string) as an element of a JSON array.
            </summary>
            <param name="value">The value to be written as a JSON string as an element of a JSON array.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Guid"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNullValue">
            <summary>
            Writes the JSON literal "null" as an element of a JSON array.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)">
            <summary>
            Writes the <see cref="T:System.Boolean"/> value (as a JSON literal "true" or "false") as an element of a JSON array.
            </summary>
            <param name="value">The value to be written as a JSON literal "true" or "false" as an element of a JSON array.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)">
            <summary>
            Writes the <see cref="T:System.Int32"/> value (as a JSON number) as an element of a JSON array.
            </summary>
            <param name="value">The value to be written as a JSON number as an element of a JSON array.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int32"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)">
            <summary>
            Writes the <see cref="T:System.Int64"/> value (as a JSON number) as an element of a JSON array.
            </summary>
            <param name="value">The value to be written as a JSON number as an element of a JSON array.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)">
            <summary>
            Writes the string text value (as a JSON string) as an element of a JSON array.
            </summary>
            <param name="value">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</param>
            <remarks>
            The value is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the UTF-16 text value (as a JSON string) as an element of a JSON array.
            </summary>
            <param name="value">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</param>
            <remarks>
            The value is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the UTF-8 text value (as a JSON string) as an element of a JSON array.
            </summary>
            <param name="utf8Value">The UTF-8 encoded value to be written as a JSON string element of a JSON array.</param>
            <remarks>
            The value is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)">
            <summary>
            Writes the <see cref="T:System.UInt32"/> value (as a JSON number) as an element of a JSON array.
            </summary>
            <param name="value">The value to be written as a JSON number as an element of a JSON array.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.UInt32"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)">
            <summary>
            Writes the <see cref="T:System.UInt64"/> value (as a JSON number) as an element of a JSON array.
            </summary>
            <param name="value">The value to be written as a JSON number as an element of a JSON array.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.UInt64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (i.e. 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="P:System.Text.Json.Utf8JsonWriter.BytesPending">
            <summary>
            Returns the amount of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter"/> so far
            that have not yet been flushed to the output and committed.
            </summary>
        </member>
        <member name="P:System.Text.Json.Utf8JsonWriter.BytesCommitted">
            <summary>
            Returns the amount of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter"/> so far.
            </summary>
            <remarks>
            In the case of IBufferwriter, this is how much the IBufferWriter has advanced.
            In the case of Stream, this is how much data has been written to the stream.
            </remarks>
        </member>
        <member name="P:System.Text.Json.Utf8JsonWriter.Options">
            <summary>
            Gets the custom behavior when writing JSON using
            the <see cref="T:System.Text.Json.Utf8JsonWriter"/> which indicates whether to format the output
            while writing and whether to skip structural JSON validation or not.
            </summary>
        </member>
        <member name="P:System.Text.Json.Utf8JsonWriter.CurrentDepth">
            <summary>
            Tracks the recursive depth of the nested objects / arrays within the JSON text
            written so far. This provides the depth of the current token.
            </summary>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)">
            <summary>
            Constructs a new <see cref="T:System.Text.Json.Utf8JsonWriter"/> instance with a specified <paramref name="bufferWriter"/>.
            </summary>
            <param name="bufferWriter">An instance of <see cref="T:System.Buffers.IBufferWriter`1" /> used as a destination for writing JSON text into.</param>
            <param name="options">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonWriter"/>
            By default, the <see cref="T:System.Text.Json.Utf8JsonWriter"/> writes JSON minimized (i.e. with no extra whitespace)
            and validates that the JSON being written is structurally valid according to JSON RFC.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the instance of <see cref="T:System.Buffers.IBufferWriter`1" /> that is passed in is null.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)">
            <summary>
            Constructs a new <see cref="T:System.Text.Json.Utf8JsonWriter"/> instance with a specified <paramref name="utf8Json"/>.
            </summary>
            <param name="utf8Json">An instance of <see cref="T:System.IO.Stream" /> used as a destination for writing JSON text into.</param>
            <param name="options">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonWriter"/>
            By default, the <see cref="T:System.Text.Json.Utf8JsonWriter"/> writes JSON minimized (i.e. with no extra whitespace)
            and validates that the JSON being written is structurally valid according to JSON RFC.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the instance of <see cref="T:System.IO.Stream" /> that is passed in is null.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.Reset">
            <summary>
            Resets the <see cref="T:System.Text.Json.Utf8JsonWriter"/> internal state so that it can be re-used.
            </summary>
            <remarks>
            The <see cref="T:System.Text.Json.Utf8JsonWriter"/> will continue to use the original writer options
            and the original output as the destination (either <see cref="T:System.Buffers.IBufferWriter`1" /> or <see cref="T:System.IO.Stream" />).
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
              The instance of <see cref="T:System.Text.Json.Utf8JsonWriter"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)">
            <summary>
            Resets the <see cref="T:System.Text.Json.Utf8JsonWriter"/> internal state so that it can be re-used with the new instance of <see cref="T:System.IO.Stream" />.
            </summary>
            <param name="utf8Json">An instance of <see cref="T:System.IO.Stream" /> used as a destination for writing JSON text into.</param>
            <remarks>
            The <see cref="T:System.Text.Json.Utf8JsonWriter"/> will continue to use the original writer options
            but now write to the passed in <see cref="T:System.IO.Stream" /> as the new destination.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the instance of <see cref="T:System.IO.Stream" /> that is passed in is null.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The instance of <see cref="T:System.Text.Json.Utf8JsonWriter"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})">
            <summary>
            Resets the <see cref="T:System.Text.Json.Utf8JsonWriter"/> internal state so that it can be re-used with the new instance of <see cref="T:System.Buffers.IBufferWriter`1" />.
            </summary>
            <param name="bufferWriter">An instance of <see cref="T:System.Buffers.IBufferWriter`1" /> used as a destination for writing JSON text into.</param>
            <remarks>
            The <see cref="T:System.Text.Json.Utf8JsonWriter"/> will continue to use the original writer options
            but now write to the passed in <see cref="T:System.Buffers.IBufferWriter`1" /> as the new destination.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the instance of <see cref="T:System.Buffers.IBufferWriter`1" /> that is passed in is null.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The instance of <see cref="T:System.Text.Json.Utf8JsonWriter"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.Flush">
            <summary>
            Commits the JSON text written so far which makes it visible to the output destination.
            </summary>
            <remarks>
            In the case of IBufferWriter, this advances the underlying <see cref="T:System.Buffers.IBufferWriter`1" /> based on what has been written so far.
            In the case of Stream, this writes the data to the stream and flushes it.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
              The instance of <see cref="T:System.Text.Json.Utf8JsonWriter"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.Dispose">
            <summary>
            Commits any left over JSON text that has not yet been flushed and releases all resources used by the current instance.
            </summary>
            <remarks>
            In the case of IBufferWriter, this advances the underlying <see cref="T:System.Buffers.IBufferWriter`1" /> based on what has been written so far.
            In the case of Stream, this writes the data to the stream and flushes it.
            </remarks>
            <remarks>
            The <see cref="T:System.Text.Json.Utf8JsonWriter"/> instance cannot be re-used after disposing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously commits the JSON text written so far which makes it visible to the output destination.
            </summary>
            <remarks>
            In the case of IBufferWriter, this advances the underlying <see cref="T:System.Buffers.IBufferWriter`1" /> based on what has been written so far.
            In the case of Stream, this writes the data to the stream and flushes it asynchronously, while monitoring cancellation requests.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
              The instance of <see cref="T:System.Text.Json.Utf8JsonWriter"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the depth of the JSON has exceeded the maximum depth of 1000 
            OR if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the depth of the JSON has exceeded the maximum depth of 1000 
            OR if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the beginning of a JSON array with a property name as the key.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON array to be written.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the depth of the JSON has exceeded the maximum depth of 1000 
            OR if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the beginning of a JSON object with a property name as the key.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the depth of the JSON has exceeded the maximum depth of 1000 
            OR if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)">
            <summary>
            Writes the beginning of a JSON array with a property name as the key.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the depth of the JSON has exceeded the maximum depth of 1000 
            OR if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)">
            <summary>
            Writes the beginning of a JSON object with a property name as the key.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the depth of the JSON has exceeded the maximum depth of 1000 
            OR if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the beginning of a JSON array with a property name as the key.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the depth of the JSON has exceeded the maximum depth of 1000 
            OR if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the beginning of a JSON object with a property name as the key.
            </summary>
            <param name="propertyName">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the depth of the JSON has exceeded the maximum depth of 1000 
            OR if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndArray">
            <summary>
            Writes the end of a JSON array.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndObject">
            <summary>
            Writes the end of a JSON object.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in an invalid JSON to be written (while validation is enabled).
            </exception>
        </member>
        <member name="P:System.SR.ArrayDepthTooLarge">
            <summary>The maximum configured depth of {0} has been exceeded. Cannot read next JSON array.</summary>
        </member>
        <member name="P:System.SR.CallFlushToAvoidDataLoss">
            <summary>The JSON writer needs to be flushed before getting the current state. There are {0} bytes that have not been committed to the output.</summary>
        </member>
        <member name="P:System.SR.CannotReadIncompleteUTF16">
            <summary>Cannot read incomplete UTF-16 JSON text as string with missing low surrogate.</summary>
        </member>
        <member name="P:System.SR.CannotReadInvalidUTF16">
            <summary>Cannot read invalid UTF-16 JSON text as string. Invalid surrogate value: '{0}'.</summary>
        </member>
        <member name="P:System.SR.CannotStartObjectArrayAfterPrimitiveOrClose">
            <summary>Cannot write the start of an object/array after a single JSON value or outside of an existing closed object/array. Current token type is '{0}'.</summary>
        </member>
        <member name="P:System.SR.CannotStartObjectArrayWithoutProperty">
            <summary>Cannot write the start of an object or array without a property name. Current token type is '{0}'.</summary>
        </member>
        <member name="P:System.SR.CannotTranscodeInvalidUtf8">
            <summary>Cannot transcode invalid UTF-8 JSON text to UTF-16 string.</summary>
        </member>
        <member name="P:System.SR.CannotWriteInvalidUTF16">
            <summary>Cannot write invalid UTF-16 text as JSON. Invalid surrogate value: '{0}'.</summary>
        </member>
        <member name="P:System.SR.CannotWriteInvalidUTF8">
            <summary>Cannot write invalid UTF-8 text as JSON. Invalid input: '{0}'.</summary>
        </member>
        <member name="P:System.SR.CannotWritePropertyWithinArray">
            <summary>Cannot write a JSON property within an array or as the first JSON token. Current token type is '{0}'.</summary>
        </member>
        <member name="P:System.SR.CannotWriteValueAfterPrimitive">
            <summary>Cannot write a JSON value after a single JSON value. Current token type is '{0}'.</summary>
        </member>
        <member name="P:System.SR.CannotWriteValueWithinObject">
            <summary>Cannot write a JSON value within an object without a property name. Current token type is '{0}'.</summary>
        </member>
        <member name="P:System.SR.DepthTooLarge">
            <summary>CurrentDepth ({0}) is equal to or larger than the maximum allowed depth of {1}. Cannot write the next JSON object or array.</summary>
        </member>
        <member name="P:System.SR.EmptyJsonIsInvalid">
            <summary>Writing an empty JSON payload (excluding comments) is invalid.</summary>
        </member>
        <member name="P:System.SR.EndOfCommentNotFound">
            <summary>Expected end of comment, but instead reached end of data.</summary>
        </member>
        <member name="P:System.SR.EndOfStringNotFound">
            <summary>Expected end of string, but instead reached end of data.</summary>
        </member>
        <member name="P:System.SR.ExpectedEndAfterSingleJson">
            <summary>'{0}' is invalid after a single JSON value. Expected end of data.</summary>
        </member>
        <member name="P:System.SR.ExpectedEndOfDigitNotFound">
            <summary>'{0}' is an invalid end of a number. Expected a delimiter.</summary>
        </member>
        <member name="P:System.SR.ExpectedFalse">
            <summary>'{0}' is an invalid JSON literal. Expected the literal 'false'.</summary>
        </member>
        <member name="P:System.SR.ExpectedJsonTokens">
            <summary>The input does not contain any JSON tokens. Expected the input to start with a valid JSON token, when isFinalBlock is true.</summary>
        </member>
        <member name="P:System.SR.ExpectedNextDigitEValueNotFound">
            <summary>'{0}' is an invalid end of a number. Expected 'E' or 'e'.</summary>
        </member>
        <member name="P:System.SR.ExpectedNull">
            <summary>'{0}' is an invalid JSON literal. Expected the literal 'null'.</summary>
        </member>
        <member name="P:System.SR.ExpectedSeparatorAfterPropertyNameNotFound">
            <summary>'{0}' is invalid after a property name. Expected a ':'.</summary>
        </member>
        <member name="P:System.SR.ExpectedStartOfPropertyNotFound">
            <summary>'{0}' is an invalid start of a property name. Expected a '"'.</summary>
        </member>
        <member name="P:System.SR.ExpectedStartOfPropertyOrValueNotFound">
            <summary>Expected start of a property name or value, but instead reached end of data.</summary>
        </member>
        <member name="P:System.SR.ExpectedStartOfValueNotFound">
            <summary>'{0}' is an invalid start of a value.</summary>
        </member>
        <member name="P:System.SR.ExpectedTrue">
            <summary>'{0}' is an invalid JSON literal. Expected the literal 'true'.</summary>
        </member>
        <member name="P:System.SR.ExpectedValueAfterPropertyNameNotFound">
            <summary>Expected a value, but instead reached end of data.</summary>
        </member>
        <member name="P:System.SR.FailedToGetLargerSpan">
            <summary>The 'IBufferWriter' could not provide an output buffer that is large enough to continue writing.</summary>
        </member>
        <member name="P:System.SR.FoundInvalidCharacter">
            <summary>'{0}' is invalid after a value. Expected either ',', '}}', or ']'.</summary>
        </member>
        <member name="P:System.SR.InvalidCast">
            <summary>Cannot get the value of a token type '{0}' as a {1}.</summary>
        </member>
        <member name="P:System.SR.InvalidCharacterAfterEscapeWithinString">
            <summary>'{0}' is an invalid escapable character within a JSON string. The string should be correctly escaped.</summary>
        </member>
        <member name="P:System.SR.InvalidCharacterWithinString">
            <summary>'{0}' is invalid within a JSON string. The string should be correctly escaped.</summary>
        </member>
        <member name="P:System.SR.InvalidEndOfJsonNonPrimitive">
            <summary>'{0}' is an invalid token type for the end of the JSON payload. Expected either 'EndArray' or 'EndObject'.</summary>
        </member>
        <member name="P:System.SR.InvalidHexCharacterWithinString">
            <summary>'{0}' is not a hex digit following '\u' within a JSON string. The string should be correctly escaped.</summary>
        </member>
        <member name="P:System.SR.JsonDocumentDoesNotSupportComments">
            <summary>Comments cannot be stored in a JsonDocument, only the Skip and Disallow comment handling modes are supported.</summary>
        </member>
        <member name="P:System.SR.JsonElementHasWrongType">
            <summary>The requested operation requires an element of type '{0}', but the target element has type '{1}'.</summary>
        </member>
        <member name="P:System.SR.MaxDepthMustBePositive">
            <summary>Max depth must be positive.</summary>
        </member>
        <member name="P:System.SR.MismatchedObjectArray">
            <summary>'{0}' is invalid without a matching open.</summary>
        </member>
        <member name="P:System.SR.ObjectDepthTooLarge">
            <summary>The maximum configured depth of {0} has been exceeded. Cannot read next JSON object.</summary>
        </member>
        <member name="P:System.SR.PropertyNameTooLarge">
            <summary>The JSON property name of length {0} is too large and not supported by the JSON writer.</summary>
        </member>
        <member name="P:System.SR.FormatDecimal">
            <summary>The JSON value is either too large or too small for a Decimal.</summary>
        </member>
        <member name="P:System.SR.FormatDouble">
            <summary>The JSON value is either too large or too small for a Double.</summary>
        </member>
        <member name="P:System.SR.FormatInt32">
            <summary>The JSON value is either of incorrect numeric format, or too large or too small for an Int32.</summary>
        </member>
        <member name="P:System.SR.FormatInt64">
            <summary>The JSON value is either of incorrect numeric format, or too large or too small for an Int64.</summary>
        </member>
        <member name="P:System.SR.FormatSingle">
            <summary>The JSON value is either too large or too small for a Single.</summary>
        </member>
        <member name="P:System.SR.FormatUInt32">
            <summary>The JSON value is either of incorrect numeric format, or too large or too small for a UInt32.</summary>
        </member>
        <member name="P:System.SR.FormatUInt64">
            <summary>The JSON value is either of incorrect numeric format, or too large or too small for a UInt64.</summary>
        </member>
        <member name="P:System.SR.RequiredDigitNotFoundAfterDecimal">
            <summary>'{0}' is invalid within a number, immediately after a decimal point ('.'). Expected a digit ('0'-'9').</summary>
        </member>
        <member name="P:System.SR.RequiredDigitNotFoundAfterSign">
            <summary>'{0}' is invalid within a number, immediately after a sign character ('+' or '-'). Expected a digit ('0'-'9').</summary>
        </member>
        <member name="P:System.SR.RequiredDigitNotFoundEndOfData">
            <summary>Expected a digit ('0'-'9'), but instead reached end of data.</summary>
        </member>
        <member name="P:System.SR.SpecialNumberValuesNotSupported">
            <summary>.NET number values such as positive and negative infinity cannot be written as valid JSON.</summary>
        </member>
        <member name="P:System.SR.ValueTooLarge">
            <summary>The JSON value of length {0} is too large and not supported by the JSON writer.</summary>
        </member>
        <member name="P:System.SR.ZeroDepthAtEnd">
            <summary>Expected depth to be zero at the end of the JSON payload. There is an open JSON object or array that should be closed.</summary>
        </member>
        <member name="P:System.SR.DeserializeCannotBeNull">
            <summary>The JSON value from {0} cannot be null.</summary>
        </member>
        <member name="P:System.SR.DeserializeDataRemaining">
            <summary>The provided data of length {0} has remaining bytes {1}.</summary>
        </member>
        <member name="P:System.SR.DeserializeUnableToConvertValue">
            <summary>The JSON value from {0} could not be converted to {1}.</summary>
        </member>
        <member name="P:System.SR.DeserializeWrongType">
            <summary>The specified type {0} must derive from the specific value's type {1}.</summary>
        </member>
        <member name="P:System.SR.SerializationInvalidBufferSize">
            <summary>The value must be greater than zero.</summary>
        </member>
        <member name="P:System.SR.BufferWriterAdvancedTooFar">
            <summary>Cannot advance past the end of the buffer, which has a size of {0}.</summary>
        </member>
        <member name="P:System.SR.InvalidComparison">
            <summary>Cannot compare the value of a token type '{0}' to text.</summary>
        </member>
        <member name="P:System.SR.FormatDateTime">
            <summary>The JSON value is not in a supported DateTime format.</summary>
        </member>
        <member name="P:System.SR.FormatDateTimeOffset">
            <summary>The JSON value is not in a supported DateTimeOffset format.</summary>
        </member>
        <member name="P:System.SR.FormatGuid">
            <summary>The JSON value is not in a supported Guid format.</summary>
        </member>
        <member name="P:System.SR.ExpectedStartOfPropertyOrValueAfterComment">
            <summary>'{0}' is an invalid start of a property name or value, after a comment.</summary>
        </member>
        <member name="P:System.SR.TrailingCommaNotAllowedBeforeArrayEnd">
            <summary>The JSON array contains a trailing comma at the end which is not supported in this mode. Change the reader options.</summary>
        </member>
        <member name="P:System.SR.TrailingCommaNotAllowedBeforeObjectEnd">
            <summary>The JSON object contains a trailing comma at the end which is not supported in this mode. Change the reader options.</summary>
        </member>
        <member name="P:System.SR.SerializerOptionsImmutable">
            <summary>Serializer options cannot be changed once serialization or deserialization has occurred.</summary>
        </member>
        <member name="P:System.SR.StreamNotWritable">
            <summary>Stream is not writable.</summary>
        </member>
        <member name="P:System.SR.CannotWriteCommentWithEmbeddedDelimiter">
            <summary>Cannot write a comment value which contains the end of comment delimiter.</summary>
        </member>
        <member name="P:System.SR.SerializerPropertyNameConflict">
            <summary>The property '{0}.{1}' has the same name as a previous property based on naming or casing policies.</summary>
        </member>
        <member name="P:System.SR.SerializerPropertyNameNull">
            <summary>The property name for '{0}.{1}' cannot be null as a result of naming policies.</summary>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.JsonConfigurationExtensions">
            <summary>
            Extension methods for adding <see cref="T:Microsoft.Extensions.Configuration.Json.JsonConfigurationProvider"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.JsonConfigurationExtensions.AddJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String)">
            <summary>
            Adds the JSON configuration provider at <paramref name="path"/> to <paramref name="builder"/>.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/> to add to.</param>
            <param name="path">Path relative to the base path stored in 
            <see cref="P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties"/> of <paramref name="builder"/>.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.JsonConfigurationExtensions.AddJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.Boolean)">
            <summary>
            Adds the JSON configuration provider at <paramref name="path"/> to <paramref name="builder"/>.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/> to add to.</param>
            <param name="path">Path relative to the base path stored in 
            <see cref="P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties"/> of <paramref name="builder"/>.</param>
            <param name="optional">Whether the file is optional.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.JsonConfigurationExtensions.AddJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds the JSON configuration provider at <paramref name="path"/> to <paramref name="builder"/>.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/> to add to.</param>
            <param name="path">Path relative to the base path stored in 
            <see cref="P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties"/> of <paramref name="builder"/>.</param>
            <param name="optional">Whether the file is optional.</param>
            <param name="reloadOnChange">Whether the configuration should be reloaded if the file changes.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.JsonConfigurationExtensions.AddJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,Microsoft.Extensions.FileProviders.IFileProvider,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds a JSON configuration source to <paramref name="builder"/>.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/> to add to.</param>
            <param name="provider">The <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider"/> to use to access the file.</param>
            <param name="path">Path relative to the base path stored in 
            <see cref="P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties"/> of <paramref name="builder"/>.</param>
            <param name="optional">Whether the file is optional.</param>
            <param name="reloadOnChange">Whether the configuration should be reloaded if the file changes.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.JsonConfigurationExtensions.AddJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Action{Microsoft.Extensions.Configuration.Json.JsonConfigurationSource})">
            <summary>
            Adds a JSON configuration source to <paramref name="builder"/>.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/> to add to.</param>
            <param name="configureSource">Configures the source.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/>.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.Json.JsonConfigurationProvider">
            <summary>
            A JSON file based <see cref="T:Microsoft.Extensions.Configuration.FileConfigurationProvider"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.Json.JsonConfigurationProvider.#ctor(Microsoft.Extensions.Configuration.Json.JsonConfigurationSource)">
            <summary>
            Initializes a new instance with the specified source.
            </summary>
            <param name="source">The source settings.</param>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.Json.JsonConfigurationProvider.Load(System.IO.Stream)">
            <summary>
            Loads the JSON data from a stream.
            </summary>
            <param name="stream">The stream to read.</param>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.Json.JsonConfigurationSource">
            <summary>
            Represents a JSON file as an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSource"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.Json.JsonConfigurationSource.Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)">
            <summary>
            Builds the <see cref="T:Microsoft.Extensions.Configuration.Json.JsonConfigurationProvider"/> for this source.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/>.</param>
            <returns>A <see cref="T:Microsoft.Extensions.Configuration.Json.JsonConfigurationProvider"/></returns>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.Json.Resources.Error_InvalidFilePath">
            <summary>
            File path must be a non-empty string.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.Json.Resources.FormatError_InvalidFilePath">
            <summary>
            File path must be a non-empty string.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.Json.Resources.Error_JSONParseError">
            <summary>
            Could not parse the JSON file. Error on line number '{0}': '{1}'.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.Json.Resources.Error_KeyIsDuplicated">
            <summary>
            A duplicate key '{0}' was found.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.Json.Resources.FormatError_KeyIsDuplicated(System.Object)">
            <summary>
            A duplicate key '{0}' was found.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.Json.Resources.Error_UnsupportedJSONToken">
            <summary>
            Unsupported JSON token '{0}' was found.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.Json.Resources.FormatError_UnsupportedJSONToken(System.Object)">
            <summary>
            Unsupported JSON token '{0}' was found.
            </summary>
        </member>
    </members>
</doc>
